#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä, –∫—É–±–∏–∫–æ–≤ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏—à–µ–∫
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä
 * 2. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
 * 3. –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * 4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
 */

const http = require('http');
const WebSocket = require('ws');

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            res.on('end', () => {
                try {
                    const parsedData = JSON.parse(responseData);
                    resolve({
                        status: res.statusCode,
                        data: parsedData,
                        headers: res.headers
                    });
                } catch (error) {
                    resolve({
                        status: res.statusCode,
                        data: responseData,
                        headers: res.headers
                    });
                }
            });
        });

        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

function log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
}

async function testGameAndDiceEndpoints() {
    log('üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –¥–ª—è –∏–≥—Ä –∏ –∫—É–±–∏–∫–æ–≤...');
    
    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
        const playersResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/players',
            method: 'GET'
        });
        
        if (playersResponse.status !== 200) {
            throw new Error(`Failed to fetch players: ${playersResponse.status}`);
        }
        
        const players = playersResponse.data.players;
        if (!players || players.length === 0) {
            throw new Error('No players found in database');
        }
        
        const testPlayer = players[0];
        log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${testPlayer.name} (ID: ${testPlayer.id})`);
        
        // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä
        log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä –∏–≥—Ä–æ–∫–∞...');
        const testGames = [
            {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞',
                status: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                dice: 7,
                comment: '–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
            }
        ];
        
        const updateGamesResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}/games`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, { games: testGames });
        
        if (updateGamesResponse.status === 200) {
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            throw new Error(`Failed to update games: ${updateGamesResponse.status} - ${JSON.stringify(updateGamesResponse.data)}`);
        }
        
        // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫...');
        const testSocialLinks = {
            discord: 'test#1234',
            twitch: 'testuser',
            telegram: '@testuser'
        };
        
        const updateSocialResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}/social`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, { socialLinks: testSocialLinks });
        
        if (updateSocialResponse.status === 200) {
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            throw new Error(`Failed to update social links: ${updateSocialResponse.status} - ${JSON.stringify(updateSocialResponse.data)}`);
        }
        
        // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ñ–∏—à–∫–∏...');
        const testCoordinates = { x: 250, y: 150 };
        
        const updateCoordinatesResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}/coordinates`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, testCoordinates);
        
        if (updateCoordinatesResponse.status === 200) {
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } else {
            throw new Error(`Failed to update coordinates: ${updateCoordinatesResponse.status} - ${JSON.stringify(updateCoordinatesResponse.data)}`);
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        log('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
        const verifyResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}`,
            method: 'GET'
        });
        
        if (verifyResponse.status === 200) {
            const updatedPlayer = verifyResponse.data;
            const games = updatedPlayer.games;
            const socialLinks = updatedPlayer.socialLinks;
            const { x, y } = updatedPlayer;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã
            if (games && games.length > 0 && games[0].name === '–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞') {
                log('‚úÖ –ò–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log('‚ùå –ò–≥—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            if (socialLinks && socialLinks.discord === 'test#1234') {
                log('‚úÖ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log('‚ùå –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if (x === 250 && y === 150) {
                log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
            }
        } else {
            throw new Error(`Failed to verify changes: ${verifyResponse.status}`);
        }
        
        log('üéâ –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
        throw error;
    }
}

async function testWebSocketSync() {
    log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    return new Promise((resolve, reject) => {
        const ws = new WebSocket('ws://localhost:3001/ws');
        let messageReceived = false;
        
        ws.on('open', () => {
            log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        });
        
        ws.on('message', (data) => {
            try {
                const message = JSON.parse(data.toString());
                log(`üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.type}`);
                
                if (message.type === 'player_updated') {
                    messageReceived = true;
                    log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                }
            } catch (error) {
                log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        });
        
        ws.on('error', (error) => {
            log(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${error.message}`);
            reject(error);
        });
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        setTimeout(() => {
            ws.close();
            if (messageReceived) {
                log('‚úÖ WebSocket —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                resolve();
            } else {
                log('‚ö†Ô∏è WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π)');
                resolve(); // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
            }
        }, 3000);
    });
}

async function testServerHealth() {
    log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        const healthResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/health',
            method: 'GET'
        });
        
        if (healthResponse.status === 200) {
            log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            return true;
        } else {
            throw new Error(`Health check failed: ${healthResponse.status}`);
        }
    } catch (error) {
        log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${error.message}`);
        return false;
    }
}

async function runTests() {
    log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
        const serverOk = await testServerHealth();
        if (!serverOk) {
            log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: npm run dev:server');
            process.exit(1);
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        await testGameAndDiceEndpoints();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket
        await testWebSocketSync();
        
        log('');
        log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
        log('');
        log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
        log('1. –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        log('2. –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin/admin)');
        log('3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–∞ –∏ —Ä–æ–ª–ª—ã –∏–≥—Ä');
        log('4. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
        log('5. –û—Ç–∫—Ä—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫–ª–∞–¥–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        
    } catch (error) {
        log('');
        log(`‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨: ${error.message}`);
        log('');
        log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3001');
        log('2. –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        log('3. –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);
