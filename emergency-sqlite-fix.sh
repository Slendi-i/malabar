#!/bin/bash

# –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SQLITE3 –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï BACKEND

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SQLITE3"
echo "================================="

# 1. –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pm2 stop all
pm2 delete all

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
echo "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m)"
echo "Node.js –≤–µ—Ä—Å–∏—è: $(node --version)"
echo "NPM –≤–µ—Ä—Å–∏—è: $(npm --version)"

# 3. –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ SQLite3
echo "üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ SQLite3..."
cd server

# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
rm -rf node_modules/sqlite3/
rm -rf node_modules/.cache/
rm -rf ~/.npm/_cacache/
npm cache clean --force

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ backend –ë–ï–ó SQLite3
echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ backend –±–µ–∑ SQLite3..."
cat > temp-server.js << 'EOF'
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(bodyParser.json({ limit: '50mb' }));

// –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–º–µ—Å—Ç–æ SQLite
const dataFile = path.join(__dirname, 'players-data.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
let players = [];
try {
  if (fs.existsSync(dataFile)) {
    players = JSON.parse(fs.readFileSync(dataFile, 'utf8'));
  } else {
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    players = Array.from({ length: 12 }, (_, i) => ({
      id: i + 1,
      name: `Player ${i + 1}`,
      avatar: `/avatars/player${i + 1}.jpg`,
      socialLinks: { discord: '', twitter: '', instagram: '' },
      stats: { wins: 0, losses: 0, draws: 0 },
      games: [],
      isOnline: false,
      position: i + 1
    }));
    saveData();
  }
} catch (error) {
  console.error('Error loading data:', error);
  players = [];
}

function saveData() {
  try {
    fs.writeFileSync(dataFile, JSON.stringify(players, null, 2));
    console.log('Data saved to file');
  } catch (error) {
    console.error('Error saving data:', error);
  }
}

// API Routes
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    storage: 'file',
    players: players.length
  });
});

app.get('/api/players', (req, res) => {
  res.json(players);
});

app.put('/api/players', (req, res) => {
  if (Array.isArray(req.body)) {
    players = req.body;
    saveData();
    console.log(`Updated ${players.length} players`);
    res.json({ message: 'All players updated successfully' });
  } else {
    res.status(400).json({ error: 'Invalid data format' });
  }
});

app.put('/api/players/:id', (req, res) => {
  const playerId = parseInt(req.params.id);
  const updatedPlayer = req.body;
  
  const playerIndex = players.findIndex(p => p.id === playerId);
  if (playerIndex === -1) {
    return res.status(404).json({ error: 'Player not found' });
  }
  
  players[playerIndex] = { ...players[playerIndex], ...updatedPlayer };
  saveData();
  
  console.log(`Updated player ${playerId}`);
  res.json({ message: 'Player updated successfully', id: playerId });
});

app.post('/api/players/:id/games', (req, res) => {
  const playerId = parseInt(req.params.id);
  const games = req.body.games;
  
  const playerIndex = players.findIndex(p => p.id === playerId);
  if (playerIndex === -1) {
    return res.status(404).json({ error: 'Player not found' });
  }
  
  players[playerIndex].games = games;
  saveData();
  
  console.log(`Updated games for player ${playerId}`);
  res.json({ message: 'Games updated successfully', id: playerId });
});

app.post('/api/players/:id/social', (req, res) => {
  const playerId = parseInt(req.params.id);
  const socialLinks = req.body.socialLinks;
  
  const playerIndex = players.findIndex(p => p.id === playerId);
  if (playerIndex === -1) {
    return res.status(404).json({ error: 'Player not found' });
  }
  
  players[playerIndex].socialLinks = socialLinks;
  saveData();
  
  console.log(`Updated social links for player ${playerId}`);
  res.json({ message: 'Social links updated successfully', id: playerId });
});

app.get('/api/users/current', (req, res) => {
  res.json({ id: -1, username: 'Guest', isLoggedIn: false });
});

app.post('/api/users/current', (req, res) => {
  res.json({ message: 'Login successful' });
});

// Start server
const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ Temporary server running on port ${PORT}`);
  console.log(`üìÅ Using file storage: ${dataFile}`);
  console.log(`üë• Loaded ${players.length} players`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nShutting down server...');
  saveData();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nShutting down server...');
  saveData();
  process.exit(0);
});
EOF

# 5. –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ backend..."
pm2 start temp-server.js --name malabar-backend-temp

cd ..

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ frontend
echo "üñ•Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
pm2 start npm --name malabar-frontend -- start

# 7. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤..."
sleep 10

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
echo "Backend health check:"
curl -s http://localhost:3001/api/health && echo ""

echo "Players API:"
curl -s http://localhost:3001/api/players | head -100 && echo ""

echo "Frontend check:"
curl -s -I http://localhost:3000 | head -1

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PM2
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å PM2:"
pm2 status

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo ""
echo "üîç –ü–æ—Ä—Ç—ã:"
netstat -tlnp | grep -E ":(3000|3001)"

# 11. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SQLite3 –≤ —Ñ–æ–Ω–µ
echo ""
echo "üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è SQLite3 –≤ —Ñ–æ–Ω–µ..."
(
  cd server
  # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
  npm install sqlite3@5.1.6 --build-from-source --verbose > sqlite3-install.log 2>&1 &
) &

echo ""
echo "‚úÖ –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–û!"
echo ""
echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:"
echo "1. http://vet-klinika-moscow.ru - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
echo "2. http://46.173.17.229:3000 - –ø—Ä–æ–≤–µ—Ä–∏–º nginx"
echo "3. http://46.173.17.229:3001/api/health - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
echo ""
echo "üìã –î–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ server/players-data.json"
echo "üìã –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SQLite3: server/sqlite3-install.log"
echo ""
echo "üîß –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nginx –¥–ª—è IP –¥–æ—Å—Ç—É–ø–∞:"
echo "   ./fix-all-remaining-issues.sh"
