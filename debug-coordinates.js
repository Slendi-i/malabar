#!/usr/bin/env node

/**
 * üîç –û–¢–õ–ê–î–ö–ê –ö–û–û–†–î–ò–ù–ê–¢ - —Ç–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
 */

const axios = require('axios');

const API_BASE = 'http://localhost:3001';

async function debugCoordinates() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –ö–û–û–†–î–ò–ù–ê–¢');
  console.log('===================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const health = await axios.get(`${API_BASE}/api/health`);
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä: ${health.status}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    const players = playersResponse.data.players;
    console.log(`‚úÖ –ò–≥—Ä–æ–∫–æ–≤: ${players.length}`);
    
    if (players.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!');
      return;
    }
    
    const testPlayer = players[0];
    console.log(`üìç –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ID=${testPlayer.id}, Name=${testPlayer.name}`);
    console.log(`üìç –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${testPlayer.x}, y=${testPlayer.y}`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∫–æ–¥–µ
    console.log('\n3. –¢–µ—Å—Ç PUT –∑–∞–ø—Ä–æ—Å–∞...');
    const testX = 123.45;
    const testY = 678.90;
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –Ω–∞: ${API_BASE}/api/players/${testPlayer.id}`);
    console.log(`üì§ –î–∞–Ω–Ω—ã–µ: {x: ${testX}, y: ${testY}}`);
    
    const putResponse = await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
      x: testX,
      y: testY
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log(`‚úÖ PUT –æ—Ç–≤–µ—Ç: ${putResponse.status}`);
    console.log(`üìã –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:`, putResponse.data);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
    const checkResponse = await axios.get(`${API_BASE}/api/players`);
    const updatedPlayer = checkResponse.data.players.find(p => p.id === testPlayer.id);
    
    console.log(`üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    
    if (updatedPlayer.x === testX && updatedPlayer.y === testY) {
      console.log('\nüéâ –í–°–Å –†–ê–ë–û–¢–ê–ï–¢! PUT endpoint —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç!');
      console.log('üî• –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤ —Å–µ—Ä–≤–µ—Ä–µ - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ!');
    } else {
      console.log('\n‚ùå PUT endpoint –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: x=${testX}, y=${testY}`);
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –û–¢–õ–ê–î–ö–ò:');
    console.error(`–°—Ç–∞—Ç—É—Å: ${error.response?.status}`);
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.response?.data) {
      console.error('–î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    
    if (error.response?.status === 500) {
      console.log('\nüí° HTTP 500 - –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node diagnose-and-fix-db.js');
      console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä');
    } else if (error.response?.status === 404) {
      console.log('\nüí° HTTP 404 - endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL endpoint');
    } else {
      console.log('\nüí° –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
  }
}

debugCoordinates();
