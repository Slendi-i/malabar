#!/usr/bin/env node

/**
 * üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–î–ò–ö–ê–õ–¨–ù–´–• –†–ï–®–ï–ù–ò–ô HTTP 500
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const axios = require('axios');
const WebSocket = require('ws');
const { runFullDiagnosis } = require('./diagnose-and-fix-db');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE = process.env.NODE_ENV === 'production' ? 'https://malabar-event.ru:3001' : 'http://localhost:3001';
const WS_URL = process.env.NODE_ENV === 'production' ? 'wss://malabar-event.ru:3001/ws' : 'ws://localhost:3001/ws';

const COLORS = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

function logStep(step, description) {
  log(`\nüîß –®–∞–≥ ${step}: ${description}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

let testResults = {
  passed: 0,
  failed: 0,
  warnings: 0
};

function assert(condition, message, isWarning = false) {
  if (condition) {
    logSuccess(message);
    testResults.passed++;
  } else {
    if (isWarning) {
      logWarning(message);
      testResults.warnings++;
    } else {
      logError(message);
      testResults.failed++;
    }
  }
}

async function testServerHealth() {
  logStep(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await axios.get(`${API_BASE}/api/health`);
    assert(response.status === 200, '–°–µ—Ä–≤–µ—Ä API –¥–æ—Å—Ç—É–ø–µ–Ω');
    return true;
  } catch (error) {
    assert(false, `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    return false;
  }
}

async function testNewCoordinatesEndpoint() {
  logStep(2, 'üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–û–í–û–ì–û endpoint /api/coordinates/:id');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    assert(playersResponse.status === 200, '–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
    
    const players = playersResponse.data.players;
    if (!players || players.length === 0) {
      assert(false, '–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç');
      return false;
    }
    
    const testPlayer = players[0];
    const testX = 777.77;
    const testY = 666.66;
    
    logInfo(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π endpoint —Å –∏–≥—Ä–æ–∫–æ–º ${testPlayer.id}: (${testX}, ${testY})`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π PATCH endpoint
    const response = await axios.patch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
      x: testX,
      y: testY
    });
    
    assert(response.status === 200, `–ù–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å ${response.status})`);
    assert(response.data.success === true, '–ù–æ–≤—ã–π endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç success: true');
    assert(response.data.x === testX, `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${response.data.x}`);
    assert(response.data.y === testY, `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${response.data.y}`);
    
    logSuccess('üéâ –ù–û–í–´–ô ENDPOINT /api/coordinates/:id –†–ê–ë–û–¢–ê–ï–¢!');
    return true;
    
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ –Ω–æ–≤–æ–≥–æ endpoint: ${error.response?.status || error.message}`);
    return false;
  }
}

async function testFallbackMethod() {
  logStep(3, 'üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FALLBACK –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π endpoint');
  
  try {
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    const players = playersResponse.data.players;
    
    if (!players || players.length === 0) {
      assert(false, '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è fallback —Ç–µ—Å—Ç–∞');
      return false;
    }
    
    const testPlayer = players[0];
    const testX = 555.55;
    const testY = 444.44;
    
    logInfo(`–¢–µ—Å—Ç–∏—Ä—É–µ–º fallback —Å –∏–≥—Ä–æ–∫–æ–º ${testPlayer.id}: (${testX}, ${testY})`);
    
    // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π PUT endpoint
    const response = await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
      x: testX,
      y: testY
    });
    
    assert(response.status === 200, `Fallback endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç (—Å—Ç–∞—Ç—É—Å ${response.status})`);
    logSuccess('üîÑ FALLBACK —á–µ—Ä–µ–∑ PUT /api/players/:id —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    return true;
    
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ fallback –º–µ—Ç–æ–¥–∞: ${error.response?.status || error.message}`);
    return false;
  }
}

async function testWebSocketSaving() {
  logStep(4, 'üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket');
  
  return new Promise((resolve) => {
    const ws = new WebSocket(WS_URL);
    let coordinatesSaved = false;
    const testX = 333.33;
    const testY = 222.22;
    const testPlayerId = 1;
    
    const timeout = setTimeout(() => {
      if (!coordinatesSaved) {
        assert(false, 'WebSocket —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥');
      }
      ws.close();
      resolve(coordinatesSaved);
    }, 10000);
    
    ws.on('open', () => {
      logInfo(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${testPlayerId}`);
      ws.send(JSON.stringify({
        type: 'save_coordinates',
        data: { id: testPlayerId, x: testX, y: testY }
      }));
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        if (message.type === 'coordinates_saved' && message.data.id === testPlayerId) {
          assert(message.data.x === testX, `WebSocket —Å–æ—Ö—Ä–∞–Ω–∏–ª X: ${message.data.x}`);
          assert(message.data.y === testY, `WebSocket —Å–æ—Ö—Ä–∞–Ω–∏–ª Y: ${message.data.y}`);
          coordinatesSaved = true;
          logSuccess('üì° WebSocket —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
          clearTimeout(timeout);
          ws.close();
          resolve(true);
        } else if (message.type === 'coordinates_error') {
          assert(false, `WebSocket –æ—à–∏–±–∫–∞: ${message.error}`);
          clearTimeout(timeout);
          ws.close();
          resolve(false);
        }
      } catch (error) {
        logError(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      }
    });
    
    ws.on('error', (error) => {
      assert(false, `–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
      clearTimeout(timeout);
      resolve(false);
    });
  });
}

async function testMethodSequence() {
  logStep(5, 'üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)');
  
  try {
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    const players = playersResponse.data.players;
    
    if (!players || players.length === 0) {
      assert(false, '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è sequence —Ç–µ—Å—Ç–∞');
      return false;
    }
    
    const testPlayer = players[0];
    const testX = 111.11;
    const testY = 999.99;
    
    logInfo(`–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –ù–æ–≤—ã–π endpoint ‚Üí Fallback ‚Üí WebSocket`);
    
    // 1. –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π endpoint
    try {
      const newResponse = await axios.patch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
        x: testX,
        y: testY
      });
      
      if (newResponse.status === 200) {
        logSuccess('‚úÖ –ù–æ–≤—ã–π endpoint —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        return true;
      }
    } catch (newError) {
      logWarning(`–ù–æ–≤—ã–π endpoint –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${newError.response?.status || newError.message}`);
    }
    
    await delay(500);
    
    // 2. –ü—Ä–æ–±—É–µ–º fallback
    try {
      const fallbackResponse = await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
        x: testX,
        y: testY
      });
      
      if (fallbackResponse.status === 200) {
        logSuccess('‚úÖ Fallback endpoint —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        return true;
      }
    } catch (fallbackError) {
      logWarning(`Fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${fallbackError.response?.status || fallbackError.message}`);
    }
    
    await delay(500);
    
    // 3. –ü—Ä–æ–±—É–µ–º WebSocket
    const wsResult = await testWebSocketSaving();
    if (wsResult) {
      logSuccess('‚úÖ WebSocket —Å—Ä–∞–±–æ—Ç–∞–ª –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      return true;
    }
    
    assert(false, '–í—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    return false;
    
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
    return false;
  }
}

async function testPerformanceComparison() {
  logStep(6, '‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤');
  
  const playersResponse = await axios.get(`${API_BASE}/api/players`);
  const players = playersResponse.data.players;
  
  if (!players || players.length === 0) {
    assert(false, '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è performance —Ç–µ—Å—Ç–∞', true);
    return;
  }
  
  const testPlayer = players[0];
  const results = {};
  
  // –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ endpoint
  try {
    const start = Date.now();
    await axios.patch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
      x: 100, y: 100
    });
    results.newEndpoint = Date.now() - start;
    logInfo(`–ù–æ–≤—ã–π endpoint: ${results.newEndpoint}ms`);
  } catch (error) {
    results.newEndpoint = null;
    logWarning(`–ù–æ–≤—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è performance —Ç–µ—Å—Ç–∞`);
  }
  
  await delay(200);
  
  // –¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ endpoint
  try {
    const start = Date.now();
    await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
      x: 200, y: 200
    });
    results.oldEndpoint = Date.now() - start;
    logInfo(`–°—Ç–∞—Ä—ã–π endpoint: ${results.oldEndpoint}ms`);
  } catch (error) {
    results.oldEndpoint = null;
    logWarning(`–°—Ç–∞—Ä—ã–π endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è performance —Ç–µ—Å—Ç–∞`);
  }
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
  if (results.newEndpoint && results.oldEndpoint) {
    const improvement = results.oldEndpoint - results.newEndpoint;
    if (improvement > 0) {
      logSuccess(`‚ö° –ù–æ–≤—ã–π endpoint –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${improvement}ms`);
    } else {
      logInfo(`‚ö° –°—Ç–∞—Ä—ã–π endpoint –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ ${Math.abs(improvement)}ms`);
    }
  }
}

async function runAllRadicalTests() {
  log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–î–ò–ö–ê–õ–¨–ù–´–• –†–ï–®–ï–ù–ò–ô HTTP 500', 'magenta');
  log('===============================================', 'magenta');
  
  // –°–Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î
  log('\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:', 'cyan');
  const dbResults = await runFullDiagnosis();
  
  if (!dbResults.fileCheck || !dbResults.connectionTest || !dbResults.updateTest) {
    log('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ë–î! –¢–µ—Å—Ç—ã API –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.', 'red');
    return;
  }
  
  log('\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API:', 'cyan');
  
  const serverOk = await testServerHealth();
  if (!serverOk) {
    log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, API —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã', 'red');
    return;
  }
  
  await testNewCoordinatesEndpoint();
  await delay(1000);
  
  await testFallbackMethod();
  await delay(1000);
  
  await testWebSocketSaving();
  await delay(1000);
  
  await testMethodSequence();
  await delay(1000);
  
  await testPerformanceComparison();
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–î–ò–ö–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í', 'magenta');
  log('==================================', 'magenta');
  logSuccess(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.passed}`);
  if (testResults.warnings > 0) {
    logWarning(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${testResults.warnings}`);
  }
  if (testResults.failed > 0) {
    logError(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.failed}`);
  } else {
    logSuccess('üéâ –í–°–ï –†–ê–î–ò–ö–ê–õ–¨–ù–´–ï –†–ï–®–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!');
  }
  
  log('\nüí° –†–ê–î–ò–ö–ê–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:', 'cyan');
  log('‚Ä¢ –û—Ç–¥–µ–ª—å–Ω—ã–π endpoint /api/coordinates/:id', 'white');
  log('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É', 'white');
  log('‚Ä¢ WebSocket-only —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤', 'white');
  log('‚Ä¢ localStorage —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤', 'white');
  log('‚Ä¢ –ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î', 'white');
  log('‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ tsconfig.json –ø—É—Ç–∏', 'white');
  log('‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö', 'white');
  log('‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫', 'white');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllRadicalTests().catch(error => {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { runAllRadicalTests };
