#!/usr/bin/env node

/**
 * üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç API —Å—Ä–∞–∑—É
 */

console.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
console.log('=========================================');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ö—É–∫ –Ω–µ –¥–µ–ª–∞–µ—Ç API –≤—ã–∑–æ–≤—ã —Å—Ä–∞–∑—É
console.log('\n1. –¢–µ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API...');

// –°—á–µ—Ç—á–∏–∫ API –≤—ã–∑–æ–≤–æ–≤
let apiCallCount = 0;

// –ú–æ–∫–∞–µ–º setTimeout –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
let timeoutCallback = null;
const originalSetTimeout = global.setTimeout;
global.setTimeout = (callback, delay) => {
  console.log(`‚è∞ setTimeout –≤—ã–∑–≤–∞–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ${delay}–º—Å`);
  timeoutCallback = callback;
  return 1; // fake timeout id
};

// –ú–æ–∫–∞–µ–º setInterval
let intervalCallback = null;
const originalSetInterval = global.setInterval;
global.setInterval = (callback, delay) => {
  console.log(`‚è∞ setInterval –≤—ã–∑–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${delay}–º—Å`);
  intervalCallback = callback;
  return 1; // fake interval id
};

// –ú–æ–∫–∞–µ–º clearInterval
global.clearInterval = () => {};

try {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º React —Ö—É–∫–∏
  const mockUseCallback = (fn, deps) => fn;
  const mockUseRef = (initial) => ({ current: initial });
  const mockUseState = (initial) => [initial, () => {}];
  const mockUseEffect = (fn, deps) => {
    console.log('üîß useEffect –≤—ã–∑–≤–∞–Ω');
    fn();
  };
  
  // –ú–æ–∫–∞–µ–º React
  global.React = {
    useCallback: mockUseCallback,
    useRef: mockUseRef,
    useState: mockUseState,
    useEffect: mockUseEffect
  };
  
  // –ú–æ–∫–∞–µ–º apiService —Å –ø–æ–¥—Å—á–µ—Ç–æ–º –≤—ã–∑–æ–≤–æ–≤
  const mockApiService = {
    getPlayers: () => {
      apiCallCount++;
      console.log(`üìû API –≤—ã–∑–æ–≤ #${apiCallCount}: getPlayers`);
      return Promise.resolve({ players: [] });
    },
    getCurrentUser: () => {
      apiCallCount++;
      console.log(`üìû API –≤—ã–∑–æ–≤ #${apiCallCount}: getCurrentUser`);
      return Promise.resolve(null);
    }
  };
  
  // –ó–∞–º–µ–Ω—è–µ–º require –¥–ª—è –º–æ–¥—É–ª–µ–π
  const Module = require('module');
  const originalRequire = Module.prototype.require;
  Module.prototype.require = function(id) {
    if (id === 'react') {
      return global.React;
    }
    if (id === './apiService') {
      return { default: mockApiService };
    }
    return originalRequire.apply(this, arguments);
  };
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ö—É–∫
  console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º usePeriodicSync...');
  const { usePeriodicSync } = require('./services/usePeriodicSync.js');
  
  console.log('üîß –í—ã–∑—ã–≤–∞–µ–º —Ö—É–∫ —Å isMounted = true...');
  const result = usePeriodicSync([], () => {}, null, () => {}, true);
  
  console.log(`üìä API –≤—ã–∑–æ–≤–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—É–∫–∞: ${apiCallCount}`);
  
  if (apiCallCount === 0) {
    console.log('‚úÖ –û–¢–õ–ò–ß–ù–û: API –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—É–∫–∞');
  } else {
    console.log('‚ùå –û–®–ò–ë–ö–ê: API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—É–∫–∞');
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ setTimeout
  console.log('\n2. –¢–µ—Å—Ç –≤—ã–∑–æ–≤–∞ API —á–µ—Ä–µ–∑ setTimeout...');
  
  if (timeoutCallback) {
    console.log('üîß –í—ã–∑—ã–≤–∞–µ–º callback –∏–∑ setTimeout...');
    timeoutCallback();
    
    console.log(`üìä API –≤—ã–∑–æ–≤–æ–≤ –ø–æ—Å–ª–µ setTimeout: ${apiCallCount}`);
    
    if (apiCallCount > 0) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–û: API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ timeout');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: API –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ timeout');
    }
  } else {
    console.log('‚ùå –û–®–ò–ë–ö–ê: setTimeout callback –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
  console.log('\n3. –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞...');
  
  if (intervalCallback) {
    console.log('üîß –í—ã–∑—ã–≤–∞–µ–º callback –∏–∑ setInterval...');
    const apiCallsBefore = apiCallCount;
    intervalCallback();
    
    console.log(`üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤: ${apiCallCount - apiCallsBefore}`);
    
    if (apiCallCount > apiCallsBefore) {
      console.log('‚úÖ –û–¢–õ–ò–ß–ù–û: API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É');
    } else {
      console.log('‚ùå –û–®–ò–ë–ö–ê: API –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É');
    }
  } else {
    console.log('‚ùå –û–®–ò–ë–ö–ê: setInterval callback –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  Module.prototype.require = originalRequire;
  global.setTimeout = originalSetTimeout;
  global.setInterval = originalSetInterval;
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
}

console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù');
console.log('üìù –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
console.log('üìù API –≤—ã–∑–æ–≤—ã —Ç–µ–ø–µ—Ä—å –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö—É–∫–∞');
