#!/usr/bin/env node

/**
 * üìÅ –°–û–ó–î–ê–ù–ò–ï –î–ò–†–ï–ö–¢–û–†–ò–ò –õ–û–ì–û–í
 * 
 * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs –¥–ª—è PM2 –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
 */

const fs = require('fs');
const path = require('path');

const logsDir = path.join(__dirname, 'logs');

console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤...');
console.log('üìç –ü—É—Ç—å:', logsDir);

try {
  if (!fs.existsSync(logsDir)) {
    fs.mkdirSync(logsDir, { recursive: true });
    console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } else {
    console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  fs.accessSync(logsDir, fs.constants.R_OK | fs.constants.W_OK);
  console.log('‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs: OK');
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs:', error.message);
  process.exit(1);
}
