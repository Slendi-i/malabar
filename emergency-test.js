#!/usr/bin/env node

/**
 * üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –¢–ï–°–¢ HTTP 500
 * –¢–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
 */

const axios = require('axios');
const sqlite3 = require('sqlite3').verbose();

const API_BASE = 'http://localhost:3001';
const DB_PATH = './server/malabar.db';

const COLORS = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

function logStep(step, description) {
  log(`\nüö® –¢–µ—Å—Ç ${step}: ${description}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

async function testServerHealth() {
  logStep(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await axios.get(`${API_BASE}/api/health`);
    logSuccess(`–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
    return true;
  } catch (error) {
    logError(`–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    return false;
  }
}

async function testDatabaseDirect() {
  logStep(2, '–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  return new Promise((resolve) => {
    const db = new sqlite3.Database(DB_PATH, sqlite3.OPEN_READWRITE, (err) => {
      if (err) {
        logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ë–î: ${err.message}`);
        resolve(false);
        return;
      }
      
      logSuccess('–ë–î –æ—Ç–∫—Ä—ã—Ç–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      db.all("PRAGMA table_info(players)", (err, columns) => {
        if (err) {
          logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${err.message}`);
          db.close();
          resolve(false);
          return;
        }
        
        logInfo('–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã players:');
        columns.forEach(col => {
          log(`  ${col.name}: ${col.type}`, 'white');
        });
        
        const hasX = columns.some(col => col.name === 'x');
        const hasY = columns.some(col => col.name === 'y');
        
        if (!hasX || !hasY) {
          logError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã x –∏–ª–∏ y!');
          db.close();
          resolve(false);
          return;
        }
        
        logSuccess('–°—Ç–æ–ª–±—Ü—ã x, y –Ω–∞–π–¥–µ–Ω—ã');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        db.get("SELECT COUNT(*) as count FROM players", (err, row) => {
          if (err) {
            logError(`–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤: ${err.message}`);
            db.close();
            resolve(false);
            return;
          }
          
          logInfo(`–ò–≥—Ä–æ–∫–æ–≤ –≤ –ë–î: ${row.count}`);
          
          if (row.count === 0) {
            logError('–í –ë–î –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!');
            db.close();
            resolve(false);
            return;
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π UPDATE
          logInfo('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π UPDATE...');
          const sql = 'UPDATE players SET x = ?, y = ? WHERE id = 1';
          const params = [999.99, 888.88];
          
          db.run(sql, params, function(err) {
            if (err) {
              logError(`UPDATE –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: ${err.message}`);
              logError(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${err.code}`);
              logError(`Errno: ${err.errno}`);
              db.close();
              resolve(false);
              return;
            }
            
            logSuccess(`UPDATE —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${this.changes}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
            db.get("SELECT x, y FROM players WHERE id = 1", (err, checkRow) => {
              if (err) {
                logError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}`);
                db.close();
                resolve(false);
                return;
              }
              
              if (checkRow.x === 999.99 && checkRow.y === 888.88) {
                logSuccess('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
              } else {
                logError(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï –æ–±–Ω–æ–≤–∏–ª–∏—Å—å: x=${checkRow.x}, y=${checkRow.y}`);
              }
              
              db.close();
              resolve(true);
            });
          });
        });
      });
    });
  });
}

async function testNewEndpoint() {
  logStep(3, '–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ PATCH endpoint');
  
  try {
    const testData = { x: 555.55, y: 666.66 };
    const url = `${API_BASE}/api/coordinates/1`;
    
    logInfo(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PATCH –Ω–∞: ${url}`);
    logInfo(`–î–∞–Ω–Ω—ã–µ:`, testData);
    
    const response = await axios.patch(url, testData, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 10000
    });
    
    logSuccess(`–û—Ç–≤–µ—Ç: ${response.status}`);
    logInfo('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
    
    if (response.data.success) {
      logSuccess('–ù–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      return true;
    } else {
      logError('Endpoint –≤–µ—Ä–Ω—É–ª success=false');
      return false;
    }
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –Ω–æ–≤–æ–≥–æ endpoint: ${error.response?.status || error.message}`);
    if (error.response?.data) {
      logError('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return false;
  }
}

async function testOldEndpoint() {
  logStep(4, '–¢–µ—Å—Ç —Å—Ç–∞—Ä–æ–≥–æ PUT endpoint');
  
  try {
    const testData = { x: 333.33, y: 444.44 };
    const url = `${API_BASE}/api/players/1`;
    
    logInfo(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –Ω–∞: ${url}`);
    logInfo(`–î–∞–Ω–Ω—ã–µ:`, testData);
    
    const response = await axios.put(url, testData, {
      headers: { 'Content-Type': 'application/json' },
      timeout: 10000
    });
    
    logSuccess(`–û—Ç–≤–µ—Ç: ${response.status}`);
    logInfo('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
    
    logSuccess('–°—Ç–∞—Ä—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    return true;
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ endpoint: ${error.response?.status || error.message}`);
    if (error.response?.data) {
      logError('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
    return false;
  }
}

async function testGetPlayers() {
  logStep(5, '–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤');
  
  try {
    const response = await axios.get(`${API_BASE}/api/players`);
    logSuccess(`–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫: ${response.status}`);
    
    if (response.data.players && response.data.players.length > 0) {
      logInfo(`–ò–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${response.data.players.length}`);
      
      const player1 = response.data.players.find(p => p.id === 1);
      if (player1) {
        logInfo(`–ò–≥—Ä–æ–∫ 1: x=${player1.x}, y=${player1.y}`);
        logSuccess('–î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã');
      } else {
        logError('–ò–≥—Ä–æ–∫ —Å ID=1 –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      return true;
    } else {
      logError('–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç');
      return false;
    }
    
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ${error.message}`);
    return false;
  }
}

async function runEmergencyDiagnosis() {
  log('\nüö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê HTTP 500', 'magenta');
  log('=======================================', 'magenta');
  
  const results = {
    server: false,
    database: false,
    newEndpoint: false,
    oldEndpoint: false,
    getPlayers: false
  };
  
  results.server = await testServerHealth();
  if (!results.server) {
    log('\nüí• –°–ï–†–í–ï–† –ù–ï–î–û–°–¢–£–ü–ï–ù! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç.', 'red');
    return results;
  }
  
  results.database = await testDatabaseDirect();
  if (!results.database) {
    log('\nüí• –ü–†–û–ë–õ–ï–ú–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•!', 'red');
  }
  
  results.getPlayers = await testGetPlayers();
  results.newEndpoint = await testNewEndpoint();
  results.oldEndpoint = await testOldEndpoint();
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò', 'magenta');
  log('==========================', 'magenta');
  
  Object.entries(results).forEach(([test, result]) => {
    const status = result ? '‚úÖ' : '‚ùå';
    const names = {
      server: '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω',
      database: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç',
      newEndpoint: '–ù–æ–≤—ã–π PATCH endpoint',
      oldEndpoint: '–°—Ç–∞—Ä—ã–π PUT endpoint', 
      getPlayers: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤'
    };
    log(`${status} ${names[test]}`, result ? 'green' : 'red');
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:', 'cyan');
  
  if (!results.database) {
    log('1. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–æ–ª–±—Ü—ã x, y', 'yellow');
    log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node diagnose-and-fix-db.js', 'yellow');
  }
  
  if (!results.newEndpoint && !results.oldEndpoint) {
    log('3. –í—Å–µ endpoint\'—ã –ø–∞–¥–∞—é—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞', 'yellow');
    log('4. –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏', 'yellow');
  }
  
  if (results.newEndpoint && !results.oldEndpoint) {
    log('5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π endpoint', 'green');
  }
  
  if (!results.newEndpoint && results.oldEndpoint) {
    log('6. –ù–æ–≤—ã–π endpoint —Å–ª–æ–º–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞—Ä—ã–π', 'yellow');
  }
  
  if (results.newEndpoint || results.oldEndpoint) {
    log('7. –•–æ—Ç—è –±—ã –æ–¥–∏–Ω endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–ª–∏–µ–Ω—Ç–µ', 'green');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  runEmergencyDiagnosis().catch(error => {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { runEmergencyDiagnosis };
