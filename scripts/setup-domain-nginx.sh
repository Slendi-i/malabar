#!/usr/bin/env bash

set -euo pipefail

# ==============================================================================
# Malabar Event: авто-настройка домена, SSL и Nginx прокси для фронта (:3000)
# и бэкенда (:3001) на одном VPS.
#
# Что делает скрипт:
# - Устанавливает nginx, certbot (если не установлены)
# - Получает/обновляет SSL сертификаты Let's Encrypt для домена и www-домена
# - Создаёт/обновляет конфиг Nginx с проксированием:
#   /        -> 127.0.0.1:3000 (Next.js фронтенд)
#   /api/    -> 127.0.0.1:3001 (Node.js backend API)
#   /ws      -> 127.0.0.1:3001/ws (WebSocket c Upgrade)
# - Включает конфиг, проверяет и перезагружает Nginx
# - (Опционально) Настраивает UFW для Nginx
# - Перезапускает процессы pm2 из ecosystem.config.js, если папка приложения указана
#
# Пример запуска:
#   sudo bash scripts/setup-domain-nginx.sh \
#     -d malabar-event.ru \
#     -e admin@example.com \
#     -a /opt/malabar-event \
#     -f 3000 \
#     -b 3001
# ==============================================================================

DOMAIN=""
EMAIL=""
APP_DIR=""
FRONT_PORT=3000
BACK_PORT=3001

print_usage() {
  cat <<USAGE
Usage: $0 -d <domain> -e <email> [-a <app_dir>] [-f <front_port>] [-b <back_port>]

Required:
  -d, --domain        Основной домен (например, malabar-event.ru)
  -e, --email         Email для Let's Encrypt (согласие с ToS)

Optional:
  -a, --app-dir       Путь до папки приложения с ecosystem.config.js (например, /opt/malabar-event)
  -f, --front-port    Порт фронтенда (Next.js), по умолчанию 3000
  -b, --back-port     Порт бэкенда (API/WebSocket), по умолчанию 3001

Пример:
  sudo $0 -d malabar-event.ru -e admin@example.com -a /opt/malabar-event -f 3000 -b 3001
USAGE
}

# --- Parse args ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--domain)
      DOMAIN="$2"; shift 2 ;;
    -e|--email)
      EMAIL="$2"; shift 2 ;;
    -a|--app-dir)
      APP_DIR="$2"; shift 2 ;;
    -f|--front-port)
      FRONT_PORT="$2"; shift 2 ;;
    -b|--back-port)
      BACK_PORT="$2"; shift 2 ;;
    -h|--help)
      print_usage; exit 0 ;;
    *)
      echo "Unknown argument: $1"; print_usage; exit 1 ;;
  esac
done

if [[ -z "$DOMAIN" || -z "$EMAIL" ]]; then
  echo "[ERROR] --domain и --email обязательны"
  print_usage
  exit 1
fi

WWW_DOMAIN="www.$DOMAIN"

echo "DOMAIN      = $DOMAIN"
echo "WWW_DOMAIN  = $WWW_DOMAIN"
echo "EMAIL       = $EMAIL"
echo "APP_DIR     = ${APP_DIR:-<не задан>}"
echo "FRONT_PORT  = $FRONT_PORT"
echo "BACK_PORT   = $BACK_PORT"

nginx_conf_path="/etc/nginx/sites-available/$DOMAIN"
nginx_conf_link="/etc/nginx/sites-enabled/$DOMAIN"
cert_dir="/etc/letsencrypt/live/$DOMAIN"

need_sudo() {
  if [[ $(id -u) -ne 0 ]]; then
    echo "[ERROR] Запустите скрипт с правами root, например: sudo $0 ..."
    exit 1
  fi
}

need_sudo

echo "\n[1/7] Установка зависимостей (nginx, certbot)"
DEBIAN_FRONTEND=noninteractive apt-get update -y
DEBIAN_FRONTEND=noninteractive apt-get install -y nginx certbot python3-certbot-nginx

echo "\n[2/7] Настройка UFW (если установлен)"
if command -v ufw >/dev/null 2>&1; then
  ufw allow 'Nginx Full' || true
fi

echo "\n[3/7] Получение/обновление SSL сертификата Let's Encrypt"
have_cert=0
if [[ -d "$cert_dir" ]]; then
  have_cert=1
  echo "Сертификат уже существует: $cert_dir"
fi

if [[ $have_cert -eq 0 ]]; then
  echo "Сертификат не найден. Получаем с помощью standalone (временная остановка nginx)..."
  systemctl stop nginx || true
  certbot certonly --standalone -d "$DOMAIN" -d "$WWW_DOMAIN" \
    --non-interactive --agree-tos -m "$EMAIL" --rsa-key-size 4096
  systemctl start nginx
fi

if [[ ! -d "$cert_dir" ]]; then
  echo "[ERROR] Сертификат не получен: $cert_dir"
  exit 1
fi

echo "\n[4/7] Создание/обновление конфига Nginx: $nginx_conf_path"
timestamp=$(date +%Y%m%d_%H%M%S)
if [[ -f "$nginx_conf_path" ]]; then
  cp -f "$nginx_conf_path" "${nginx_conf_path}.bak_${timestamp}"
fi

cat > "$nginx_conf_path" <<NGINX
# Auto-generated by setup-domain-nginx.sh (${timestamp})

server {
    listen 80;
    server_name $DOMAIN $WWW_DOMAIN;
    return 301 https://$DOMAIN\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $WWW_DOMAIN;
    ssl_certificate     /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    return 301 https://$DOMAIN\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    ssl_certificate     /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;

    # Безопасные заголовки и HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Проксирование фронта (Next.js) на :$FRONT_PORT
    location / {
        proxy_pass http://127.0.0.1:$FRONT_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For \$remote_addr;
        proxy_read_timeout 60s;
    }

    # Проксирование API на :$BACK_PORT
    location /api/ {
        proxy_pass http://127.0.0.1:$BACK_PORT;
        proxy_set_header Host \$host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Forwarded-For \$remote_addr;
        proxy_read_timeout 60s;
    }

    # Проксирование WebSocket на :$BACK_PORT/ws
    location /ws {
        proxy_pass http://127.0.0.1:$BACK_PORT/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host \$host;
        proxy_read_timeout 60s;
    }
}
NGINX

echo "\n[5/7] Активация сайта в Nginx"
ln -sf "$nginx_conf_path" "$nginx_conf_link"
nginx -t
systemctl reload nginx

echo "\n[6/7] Настройка автопродления сертификатов (certbot timer)"
systemctl enable --now certbot.timer || true

echo "\n[7/7] Перезапуск процессов приложения (если указан APP_DIR)"
if [[ -n "$APP_DIR" && -d "$APP_DIR" ]]; then
  cd "$APP_DIR"
  if command -v pm2 >/dev/null 2>&1; then
    # Перезапускаем оба процесса по ecosystem.config.js
    pm2 start ecosystem.config.js || true
    pm2 restart ecosystem.config.js || true
    pm2 save || true
  else
    echo "[INFO] pm2 не найден. Установите pm2: npm i -g pm2"
  fi
else
  echo "[INFO] APP_DIR не указан или не существует. Пропускаю PM2 шаг."
fi

echo "\nГотово! Проверьте:"
echo "  https://$DOMAIN/"
echo "  https://$DOMAIN/api/health"
echo "Если что-то не работает — смотрите логи: /var/log/nginx/error.log и pm2 logs"


