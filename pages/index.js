import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@mui/material';
import Sidebar from '../components/Sidebar';
import PlayerIcons from '../components/PlayerIcons';
import AuthModal from '../components/AuthModal';
import apiService from '../services/apiService';
import { useRealTimeSync } from '../services/useRealTimeSync';
import { usePeriodicSync } from '../services/usePeriodicSync';

export default function Home() {
  const [players, setPlayers] = useState([]);
  const [authModalOpen, setAuthModalOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isMounted, setIsMounted] = useState(false);
  const [imageDimensions, setImageDimensions] = useState({ 
    width: 800, 
    height: 600,
    ratio: 0.75
  });
  const [syncStatus, setSyncStatus] = useState('disconnected');
  const containerRef = useRef(null);
  const imageRef = useRef(null);
  const dataLoadedRef = useRef(false); // –§–ª–∞–≥ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  
  // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  // –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // üöÄ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const updatePlayerPositionRef = useRef(null);

  // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏  
  const handlePlayersUpdate = useCallback((type, data, playerId) => {
    console.log('üîÑ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', type, playerId, data);
    
    if ((type === 'coordinates' || type === 'player_position_update') && playerId && data) {
      console.log('üéØ –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket:', { type, playerId, x: data.x, y: data.y });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—ã–π ref –≤–º–µ—Å—Ç–æ window –æ–±—ä–µ–∫—Ç–∞
      if (updatePlayerPositionRef.current) {
        console.log('üì° –í—ã–∑—ã–≤–∞–µ–º updatePlayerPositionRef.current');
        updatePlayerPositionRef.current(playerId, data.x, data.y);
      } else {
        console.warn('‚ùå updatePlayerPositionRef.current –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        // Fallback - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ React state
        setPlayers(prev => prev.map(player => 
          player.id === playerId 
            ? { ...player, x: data.x, y: data.y }
            : player
        ));
      }
      
    } else if (type === 'profile' && playerId && data) {
      // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞:', playerId, data);
      setPlayers(prev => prev.map(player => {
        if (player.id !== playerId) return player;
        
        // –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è
        const updatedPlayer = { ...player };
        
        if (data.name !== undefined && data.name !== player.name) {
          updatedPlayer.name = data.name;
          console.log(`üìù –ò–º—è –∏–≥—Ä–æ–∫–∞ ${playerId} –∏–∑–º–µ–Ω–µ–Ω–æ: ${player.name} ‚Üí ${data.name}`);
        }
        
        if (data.avatar !== undefined && data.avatar !== player.avatar) {
          updatedPlayer.avatar = data.avatar;
          console.log(`üìù –ê–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ ${playerId} –∏–∑–º–µ–Ω—ë–Ω`);
        }
        
        if (data.games !== undefined && JSON.stringify(data.games) !== JSON.stringify(player.games)) {
          updatedPlayer.games = data.games;
          console.log(`üìù –ò–≥—Ä—ã –∏–≥—Ä–æ–∫–∞ ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
        }
        
        if (data.stats !== undefined && JSON.stringify(data.stats) !== JSON.stringify(player.stats)) {
          updatedPlayer.stats = data.stats;
          console.log(`üìù –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        }
        
        if (data.socialLinks !== undefined && JSON.stringify(data.socialLinks) !== JSON.stringify(player.socialLinks)) {
          updatedPlayer.socialLinks = data.socialLinks;
          console.log(`üìù –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–≥—Ä–æ–∫–∞ ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
        }
        
        if (data.isOnline !== undefined && data.isOnline !== player.isOnline) {
          updatedPlayer.isOnline = data.isOnline;
          console.log(`üìù –°—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∞ ${playerId}: ${data.isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'}`);
        }
        
        // x –∏ y –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ coordinates —Ç–∏–ø
        return updatedPlayer;
      }));
      
    } else if (type === 'initial_load' && Array.isArray(data)) {
      // –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ - –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      console.log('üì• –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', data.length, '–∏–≥—Ä–æ–∫–æ–≤');
      if (!dataLoadedRef.current) {
        const normalizedPlayers = data.map(player => ({
          ...player,
          avatar: player.avatar || '',
          games: Array.isArray(player.games) ? player.games : [],
          stats: player.stats || { wins: 0, rerolls: 0, drops: 0 },
          socialLinks: player.socialLinks || { twitch: '', telegram: '', discord: '' },
          position: player.position || player.id,
          x: player.x !== undefined ? player.x : ((player.position - 1) % 3) * 200 + 100,
          y: player.y !== undefined ? player.y : Math.floor((player.position - 1) / 3) * 200 + 100
        }));
        
        setPlayers(normalizedPlayers);
        dataLoadedRef.current = true;
        setSyncStatus('synchronized');
      }
    }
  }, []);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–≥—Ä–æ–∫–æ–≤
  const handlePlayerPositionUpdate = useCallback((playerId, x, y) => {
    console.log(`üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ ${playerId}: (${x}, ${y})`);
    // –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ PlayerIcons —Å–æ—Ö—Ä–∞–Ω–∏–ª –ø–æ–∑–∏—Ü–∏—é –≤ –ë–î
    // –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    // (–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–µ—Ä–≤–µ—Ä–µ)
  }, []);

  const handleUserUpdate = useCallback((type, data) => {
    if (type === 'login' && data) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—Ö–æ–¥–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    }
  }, []);

  // –£–±—Ä–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é debouncedSave - —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  // –≠—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π

  // Initialize WebSocket connection
  const { isConnected, connectionStatus, reconnect } = useRealTimeSync(handlePlayersUpdate, handleUserUpdate);
  
  // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  const { 
    syncStatus: periodicSyncStatus, 
    lastSyncTime, 
    syncOnChange, 
    isSyncing 
  } = usePeriodicSync(players, setPlayers, currentUser, setCurrentUser);

  // üöÄ –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö—É–∫ –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
  console.log('üîß Periodic sync hook mounted, isSyncing:', isSyncing);

  // üöÄ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–¢–ê–¢–£–° –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isSyncing) {
      setSyncStatus('syncing');
    } else if (isConnected) {
      setSyncStatus('synchronized');
    } else {
      switch (connectionStatus) {
        case 'connecting':
          setSyncStatus('connecting');
          break;
        case 'reconnecting':
          setSyncStatus('reconnecting');
          break;
        case 'failed':
          setSyncStatus('fallback');
          break;
        case 'error':
          setSyncStatus('error');
          break;
        default:
          setSyncStatus('disconnected');
      }
    }
  }, [isConnected, connectionStatus, isSyncing]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    setIsMounted(true);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    const restoreUserFromStorage = () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      if (typeof window === 'undefined') return null;
      
      try {
        const savedUser = localStorage.getItem('currentUser');
        if (savedUser) {
          const userData = JSON.parse(savedUser);
          setCurrentUser(userData);
          return userData;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
        if (typeof window !== 'undefined') {
          localStorage.removeItem('currentUser'); // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
      }
      return null;
    };

    const loadData = async () => {
      // üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
      if (dataLoadedRef.current) {
        console.log('üìã –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É');
        return;
      }
      
      try {
        console.log('üîÑ –ï–î–ò–ù–û–†–ê–ó–û–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
        setSyncStatus('connecting');
        
        // –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const restoredUser = restoreUserFromStorage();
        
        // Load players from API –û–î–ò–ù —Ä–∞–∑
        const response = await apiService.getPlayers();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        if (response && response.players && Array.isArray(response.players)) {
          const normalizedPlayers = response.players.map(player => ({
            ...player,
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π image/avatar
            avatar: player.avatar || '',
            games: Array.isArray(player.games) ? player.games : [],
            stats: player.stats || {
              wins: 0,
              rerolls: 0,
              drops: 0,
              position: player.id
            },
            // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û: –ù–ï –ó–ê–ì–†–£–ñ–ê–ï–ú –ö–û–û–†–î–ò–ù–ê–¢–´ –í REACT STATE
            // –ü–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ DOM —á–µ—Ä–µ–∑ API –≤ PlayerIcons
          }));
          
          setPlayers(normalizedPlayers);
          dataLoadedRef.current = true; // üîí –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
          
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –û–î–ò–ù —Ä–∞–∑:', normalizedPlayers?.length, '–∏–≥—Ä–æ–∫–æ–≤');
          setSyncStatus('synchronized');
        } else {
          console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
          setSyncStatus('error');
          // –ù–ï —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ë–î!
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∏–∑ localStorage
        if (!restoredUser) {
          try {
            const apiUser = await apiService.getCurrentUser();
            // –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª null (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω) –∏–ª–∏ Guest - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (apiUser && apiUser.username && apiUser.username !== 'Guest' && apiUser.isLoggedIn) {
              setCurrentUser(apiUser);
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
              if (typeof window !== 'undefined') {
                localStorage.setItem('currentUser', JSON.stringify(apiUser));
              }
            } else {
              // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
              setCurrentUser(null);
              if (typeof window !== 'undefined') {
                localStorage.removeItem('currentUser');
              }
            }
          } catch (e) {
            console.warn('Failed to load user from API:', e);
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ API —Ç–æ–∂–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setCurrentUser(null);
            if (typeof window !== 'undefined') {
              localStorage.removeItem('currentUser');
            }
          }
        }
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        setSyncStatus('error');
      }
    };

    if (typeof window !== 'undefined') {
      loadData();
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      if (containerRef.current && imageDimensions.ratio) {
        const containerWidth = containerRef.current.clientWidth;
        const calculatedHeight = containerWidth * imageDimensions.ratio;
        
        setImageDimensions(prev => ({
          ...prev,
          width: containerWidth,
          height: calculatedHeight
        }));
      }
    };

    // Only add resize listener if we're in browser environment
    if (typeof window !== 'undefined') {
      window.addEventListener('resize', handleResize);
      handleResize(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤

      return () => window.removeEventListener('resize', handleResize);
    }
  }, [imageDimensions.ratio]);

  // –£–ë–†–ê–õ–ò –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï - –æ–Ω–æ —Å–æ–∑–¥–∞–≤–∞–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã!
  // –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —è–≤–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (PlayerProfileModal, PlayerIcons)
  // Real-time sync –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏—Å—Ç–∏–Ω—ã

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleLogin = async (login, password) => {
    try {
      let userData;
      
      if (login === 'admin' && password === 'admin') {
        userData = { type: 'admin', id: 0, name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' };
      } else {
        const playerNumber = parseInt(login.replace('Player', ''));
        if (!isNaN(playerNumber) && login === `Player${playerNumber}` && password === `Player${playerNumber}`) {
          userData = {
            type: 'player',
            id: playerNumber,
            name: `–ò–≥—Ä–æ–∫ ${playerNumber}`
          };
        } else {
          userData = { type: 'viewer', id: -1, name: '–ó—Ä–∏—Ç–µ–ª—å' };
        }
      }
      
      // Save user to API (fix format for server)
      await apiService.setCurrentUser({
        username: userData.name,
        isLoggedIn: true
      });
      setCurrentUser(userData);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è persistence
      if (typeof window !== 'undefined') {
        localStorage.setItem('currentUser', JSON.stringify(userData));
      }
    } catch (error) {
      console.error('Login failed:', error);
      // Fallback to local state if API fails
      let fallbackUserData;
      if (login === 'admin' && password === 'admin') {
        fallbackUserData = { type: 'admin', id: 0, name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' };
      } else {
        const playerNumber = parseInt(login.replace('Player', ''));
        if (!isNaN(playerNumber) && login === `Player${playerNumber}` && password === `Player${playerNumber}`) {
          fallbackUserData = {
            type: 'player',
            id: playerNumber,
            name: `–ò–≥—Ä–æ–∫ ${playerNumber}`
          };
        } else {
          fallbackUserData = { type: 'viewer', id: -1, name: '–ó—Ä–∏—Ç–µ–ª—å' };
        }
      }
      
      setCurrentUser(fallbackUserData);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('currentUser', JSON.stringify(fallbackUserData));
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ API —Ç–æ–∂–µ (–¥–ª—è fallback —Å–ª—É—á–∞—è)
      try {
        await apiService.setCurrentUser({
          username: fallbackUserData.name,
          isLoggedIn: true
        });
      } catch (apiError) {
        console.warn('Fallback API save failed, using localStorage only:', apiError);
      }
    }
  };

  const handleLogout = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ logout
      await apiService.logout();
    } catch (error) {
      console.error('Logout failed:', error);
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ localStorage
    setCurrentUser(null);
    if (typeof window !== 'undefined') {
      localStorage.removeItem('currentUser');
    }
  };

  // üöÄ –£–ë–†–ê–õ–ò cleanup –¥–ª—è saveTimeoutRef - —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö

  if (!isMounted) return null;

  return (
    <div className="flex relative h-screen w-full bg-gray-100">
      {/* üöÄ –£–ü–†–û–©–ï–ù–ù–´–ô –ò–ù–î–ò–ö–ê–¢–û–† –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò - —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç */}
      <div className="absolute bottom-4 right-4 z-50">
        <div className="flex items-center gap-2 bg-white bg-opacity-90 px-3 py-2 rounded-lg shadow-lg">
          <div 
            className={`w-3 h-3 rounded-full ${
              syncStatus === 'synchronized' ? 'bg-green-500' :
              syncStatus === 'syncing' ? 'bg-yellow-500 animate-pulse' :
              syncStatus === 'saving' ? 'bg-yellow-500' :
              syncStatus === 'connecting' ? 'bg-blue-500 animate-pulse' :
              syncStatus === 'reconnecting' ? 'bg-orange-500 animate-pulse' :
              syncStatus === 'fallback' ? 'bg-purple-500' :
              syncStatus === 'error' ? 'bg-red-500' :
              'bg-gray-500'
            }`}
            title={
              syncStatus === 'synchronized' ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' :
              syncStatus === 'syncing' ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' :
              syncStatus === 'saving' ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' :
              syncStatus === 'connecting' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
              syncStatus === 'reconnecting' ? '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' :
              syncStatus === 'fallback' ? 'HTTP —Ä–µ–∂–∏–º' :
              syncStatus === 'error' ? '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' :
              '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'
            }
          />
          {/* –ö–Ω–æ–ø–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö */}
          {(syncStatus === 'error' || syncStatus === 'fallback') && (
            <button 
              onClick={reconnect}
              className="text-xs bg-red-100 text-red-700 px-2 py-1 rounded hover:bg-red-200"
              title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
            >
              ‚Üª
            </button>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <div className="absolute top-4 right-20 z-50">
        {currentUser && currentUser.name && currentUser.isLoggedIn ? (
          <Button 
            variant="contained" 
            onClick={handleLogout}
            sx={{
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'center',
              alignItems: 'center',
              padding: '14px 24px',
              gap: '10px',
              width: 'auto',
              height: '49px',
              background: '#151515',
              borderRadius: '6px',
              textTransform: 'none',
              fontFamily: 'Raleway',
              fontStyle: 'normal',
              fontWeight: 700,
              fontSize: '18px',
              lineHeight: '21px',
              color: '#FFFFFF',
              '&:hover': {
                background: '#333333',
              },
              boxShadow: 'none'
            }}
          >
            –í—ã–π—Ç–∏ ({currentUser.name})
          </Button>
        ) : (
          <Button 
            variant="contained" 
            onClick={() => setAuthModalOpen(true)}
            sx={{
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'center',
              alignItems: 'center',
              padding: '14px 24px',
              gap: '10px',
              width: 'auto',
              height: '49px',
              background: '#151515',
              borderRadius: '6px',
              textTransform: 'none',
              fontFamily: 'Raleway',
              fontStyle: 'normal',
              fontWeight: 700,
              fontSize: '18px',
              lineHeight: '21px',
              color: '#FFFFFF',
              '&:hover': {
                background: '#333333',
              },
              boxShadow: 'none'
            }}
          >
            –í–æ–π—Ç–∏
          </Button>
        )}
      </div>

      <Sidebar 
        players={players} 
        setPlayers={setPlayers}
        currentUser={currentUser}
      />

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div 
        ref={containerRef}
        className="flex-1 relative overflow-y-auto overflow-x-hidden"
        style={{
          scrollbarWidth: 'thin',
          scrollbarColor: '#151515 #EDEDED',
        }}
      >
        <div
          style={{
            width: '100%',
            height: `${imageDimensions.height}px`,
            minHeight: '100vh',
            position: 'relative'
          }}
        >
          {/* Hidden image for dimension detection */}
          <img
            ref={imageRef}
            src="/game-field.jpg"
            alt="Game field"
            style={{
              position: 'absolute',
              top: 0,
              left: 0,
              width: '100%',
              height: '100%',
              objectFit: 'cover',
              zIndex: 0
            }}
            onLoad={() => {
              if (imageRef.current) {
                const ratio = imageRef.current.naturalHeight / imageRef.current.naturalWidth;
                setImageDimensions({
                  width: imageRef.current.naturalWidth,
                  height: imageRef.current.naturalHeight,
                  ratio
                });
              }
            }}
            onError={() => {
              console.warn('Failed to load game-field.jpg, using default dimensions');
              // Keep default dimensions
            }}
          />
          
          {/* Player icons overlay */}
          <div style={{ position: 'relative', zIndex: 1 }}>
        <PlayerIcons 
          players={players} 
          setPlayers={setPlayers}
          currentUser={currentUser}
          onPlayerPositionUpdate={handlePlayerPositionUpdate}
          updatePlayerPositionRef={updatePlayerPositionRef}
          syncOnChange={syncOnChange}
        />
          </div>
        </div>
      </div>

      {/* –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞ */}
      <style jsx global>{`
        ::-webkit-scrollbar {
          width: 8px;
        }
        ::-webkit-scrollbar-track {
          background: #EDEDED;
          border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb {
          background-color: #151515;
          border-radius: 4px;
        }
      `}</style>

      <AuthModal
        open={authModalOpen}
        onClose={() => setAuthModalOpen(false)}
        onLogin={handleLogin}
      />
    </div>
  );
}