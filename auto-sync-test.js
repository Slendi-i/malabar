#!/usr/bin/env node

/**
 * üöÄ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
 */

const API_BASE = 'http://localhost:3001';

async function autoSyncTest() {
  console.log('üöÄ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò');
  console.log('===================================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch(`${API_BASE}/api/health`);
    if (!healthResponse.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${healthResponse.status}`);
    }
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const initialResponse = await fetch(`${API_BASE}/api/players`);
    const initialData = await initialResponse.json();
    const initialPlayers = initialData.players || [];
    
    if (initialPlayers.length === 0) {
      throw new Error('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    const testPlayer = initialPlayers[0];
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ ${testPlayer.id}: ${testPlayer.name}`);
    console.log(`üìç –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${testPlayer.x}, y=${testPlayer.y}`);
    
    // 3. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    console.log('\n3. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
    const testX = Math.round(Math.random() * 800);
    const testY = Math.round(Math.random() * 600);
    
    console.log(`üì§ –ò–∑–º–µ–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞: (${testX}, ${testY})`);
    
    const updateResponse = await fetch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        x: testX,
        y: testY
      })
    });
    
    if (!updateResponse.ok) {
      const errorText = await updateResponse.text();
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${updateResponse.status} - ${errorText}`);
    }
    
    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω—ã');
    
    // 4. –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\n4. –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    console.log('‚è∞ –ñ–¥—ë–º 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    console.log('   (–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    for (let i = 0; i < 3; i++) {
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i + 1}/3 (—á–µ—Ä–µ–∑ ${(i + 1) * 5} —Å–µ–∫—É–Ω–¥)...`);
      
      const checkResponse = await fetch(`${API_BASE}/api/players`);
      const checkData = await checkResponse.json();
      const checkPlayer = checkData.players.find(p => p.id === testPlayer.id);
      
      if (checkPlayer) {
        console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${checkPlayer.x}, y=${checkPlayer.y}`);
        
        if (checkPlayer.x === testX && checkPlayer.y === testY) {
          console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
        } else {
          console.log('‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—â—ë –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
      }
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\n5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalResponse = await fetch(`${API_BASE}/api/players`);
    const finalData = await finalResponse.json();
    const finalPlayer = finalData.players.find(p => p.id === testPlayer.id);
    
    if (finalPlayer) {
      console.log(`üìç –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${finalPlayer.x}, y=${finalPlayer.y}`);
      
      if (finalPlayer.x === testX && finalPlayer.y === testY) {
        console.log('‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!');
      } else {
        console.log('‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: x=${testX}, y=${testY}`);
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ: x=${finalPlayer.x}, y=${finalPlayer.y}`);
      }
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ó–ê–í–ï–†–®–Å–ù!');
    console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin');
    console.log('3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥');
    console.log('4. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã');
    console.log('5. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–æ—â—ë–Ω –¥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞');
    
    console.log('\nüî• –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø:');
    console.log('‚Ä¢ –£–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è');
    console.log('‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–æ—â—ë–Ω –¥–æ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞');
    console.log('‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥');
    console.log('‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö');
    
    console.log('\nüé® –¶–í–ï–¢–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:');
    console.log('‚Ä¢ üü¢ –ó–µ–ª—ë–Ω—ã–π - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    console.log('‚Ä¢ üü° –ñ—ë–ª—Ç—ã–π - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    console.log('‚Ä¢ üîµ –°–∏–Ω–∏–π - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    console.log('‚Ä¢ üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    console.log('‚Ä¢ üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - HTTP —Ä–µ–∂–∏–º');
    console.log('‚Ä¢ üî¥ –ö—Ä–∞—Å–Ω—ã–π - –æ—à–∏–±–∫–∞');
    console.log('‚Ä¢ ‚ö™ –°–µ—Ä—ã–π - –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pm2 restart malabar-server');
    }
  }
}

autoSyncTest();
