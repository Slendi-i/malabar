#!/usr/bin/env node

/**
 * üöÄ –¢–ï–°–¢ –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥, –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∏–ª–µ–Ω–∏—è)
 * 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–∫–Ω–æ–ø–∫–∞ –í–æ–π—Ç–∏/–í—ã–π—Ç–∏, —Å–ª—ë—Ç –≤ –≥–æ—Å—Ç—è)
 * 3. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
 */

const API_BASE_URL = 'http://46.173.17.229:3001';

async function testWebSocketStability() {
  console.log('\nüîå –¢–ï–°–¢: WebSocket —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å');
  
  try {
    const WebSocket = require('ws');
    const ws = new WebSocket('ws://46.173.17.229:3001/ws');
    
    let messageCount = 0;
    const startTime = Date.now();
    
    ws.on('open', () => {
      console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      const pingInterval = setInterval(() => {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));
          messageCount++;
        }
      }, 5000);
      
      // –¢–µ—Å—Ç –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        clearInterval(pingInterval);
        ws.close();
        
        const duration = (Date.now() - startTime) / 1000;
        console.log(`üìä WebSocket —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ ${duration}—Å`);
        console.log(`üìä –°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: ${(messageCount / duration).toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
      }, 30000);
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data);
        if (message.type === 'pong') {
          console.log('üì° –ü–æ–ª—É—á–µ–Ω pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
      }
    });
    
    ws.on('close', () => {
      console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    });
    
    ws.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error.message);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket —Ç–µ—Å—Ç–∞:', error.message);
  }
}

async function testAuth() {
  console.log('\nüîê –¢–ï–°–¢: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 401)
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const response1 = await fetch(`${API_BASE_URL}/api/users/current`, {
      credentials: 'include'
    });
    
    if (response1.status === 401) {
      console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: 401 –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è 401, –ø–æ–ª—É—á–µ–Ω ${response1.status}`);
    }
    
    // –¢–µ—Å—Ç 2: –õ–æ–≥–∏–Ω
    console.log('2. –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞...');
    const loginResponse = await fetch(`${API_BASE_URL}/api/users/current`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      credentials: 'include',
      body: JSON.stringify({
        username: 'testuser',
        isLoggedIn: true
      })
    });
    
    if (loginResponse.ok) {
      console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω');
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const response2 = await fetch(`${API_BASE_URL}/api/users/current`, {
        credentials: 'include'
      });
      
      if (response2.ok) {
        const user = await response2.json();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.username);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${response2.status}`);
      }
      
      // –¢–µ—Å—Ç 4: –õ–æ–≥–∞—É—Ç
      console.log('4. –¢–µ—Å—Ç –ª–æ–≥–∞—É—Ç–∞...');
      const logoutResponse = await fetch(`${API_BASE_URL}/api/users/current`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({
          username: '',
          isLoggedIn: false
        })
      });
      
      if (logoutResponse.ok) {
        console.log('‚úÖ –õ–æ–≥–∞—É—Ç —É—Å–ø–µ—à–µ–Ω');
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∞—É—Ç–∞: ${logoutResponse.status}`);
      }
      
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${loginResponse.status}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

async function testPeriodicSync() {
  console.log('\n‚è∞ –¢–ï–°–¢: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
  
  try {
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    console.log('1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤...');
    const response = await fetch(`${API_BASE_URL}/api/players`, {
      credentials: 'include'
    });
    
    if (response.ok) {
      const players = await response.json();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (players.length > 0) {
        const player = players[0];
        const hasCoords = player.x !== undefined && player.y !== undefined;
        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–æ–≤: ${hasCoords ? '–µ—Å—Ç—å' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
        
        if (hasCoords) {
          console.log(`üìä –ü—Ä–∏–º–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: (${player.x}, ${player.y})`);
        }
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ${response.status}`);
    }
    
    // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    console.log('2. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
    if (response.ok && players.length > 0) {
      const playerId = players[0].id;
      const newX = Math.floor(Math.random() * 800);
      const newY = Math.floor(Math.random() * 600);
      
      const coordResponse = await fetch(`${API_BASE_URL}/api/coordinates/${playerId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify({ x: newX, y: newY })
      });
      
      if (coordResponse.ok) {
        const result = await coordResponse.json();
        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: (${result.x}, ${result.y})`);
        
        if (result.skipped) {
          console.log('‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)');
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${coordResponse.status}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô');
  console.log('=====================================');
  
  await testAuth();
  await testPeriodicSync();
  
  // WebSocket —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  testWebSocketStability();
  
  console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–ü–£–©–ï–ù–´');
  console.log('üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testWebSocketStability,
  testAuth,
  testPeriodicSync,
  runAllTests
};