#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É API, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */

const http = require('http');

function makeRequest(options, data) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let responseData = '';
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            res.on('end', () => {
                try {
                    const parsedData = JSON.parse(responseData);
                    resolve({
                        status: res.statusCode,
                        data: parsedData,
                        headers: res.headers
                    });
                } catch (error) {
                    resolve({
                        status: res.statusCode,
                        data: responseData,
                        headers: res.headers
                    });
                }
            });
        });

        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        req.end();
    });
}

function log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
}

async function testAllFixes() {
    log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health
        log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
        const healthResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/health',
            method: 'GET'
        });
        
        if (healthResponse.status === 200) {
            log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
            throw new Error(`Health check failed: ${healthResponse.status}`);
        }
        
        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...');
        const playersResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/players',
            method: 'GET'
        });
        
        if (playersResponse.status !== 200) {
            throw new Error(`Failed to fetch players: ${playersResponse.status}`);
        }
        
        const players = playersResponse.data.players;
        if (!players || players.length === 0) {
            throw new Error('No players found in database');
        }
        
        const testPlayer = players[0];
        log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: ${testPlayer.name} (ID: ${testPlayer.id})`);
        
        // 3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä
        log('3. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä...');
        const testGames = [
            {
                name: '–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞',
                status: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                dice: 7,
                comment: '–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π'
            }
        ];
        
        const updateGamesResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}/games`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, { games: testGames });
        
        if (updateGamesResponse.status === 200) {
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
            throw new Error(`Failed to update games: ${updateGamesResponse.status}`);
        }
        
        // 4. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        log('4. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
        const testCoordinates = { x: 300, y: 200 };
        
        const updateCoordinatesResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}/coordinates`,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        }, testCoordinates);
        
        if (updateCoordinatesResponse.status === 200) {
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
            throw new Error(`Failed to update coordinates: ${updateCoordinatesResponse.status}`);
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        log('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...');
        const verifyResponse = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: `/api/players/${testPlayer.id}`,
            method: 'GET'
        });
        
        if (verifyResponse.status === 200) {
            const updatedPlayer = verifyResponse.data;
            const games = updatedPlayer.games;
            const { x, y } = updatedPlayer;
            
            if (games && games.length > 0 && games[0].name === '–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä–∞') {
                log('‚úÖ –ò–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log('‚ùå –ò–≥—Ä—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
            }
            
            if (x === 300 && y === 200) {
                log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            } else {
                log('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
            }
        } else {
            throw new Error(`Failed to verify changes: ${verifyResponse.status}`);
        }
        
        log('üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!');
        log('');
        log('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
        log('1. –û—Ç–∫—Ä—ã—Ç—å http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
        log('2. –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin/admin)');
        log('3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–∞ –∏ —Ä–æ–ª–ª—ã –∏–≥—Ä');
        log('4. –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ñ–∏—à–∫–∏ –∏–≥—Ä–æ–∫–æ–≤');
        log('5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è');
        
    } catch (error) {
        log(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
        log('');
        log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        log('1. –ó–∞–ø—É—â–µ–Ω –ª–∏ backend —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3001');
        log('2. –ó–∞–ø—É—â–µ–Ω –ª–∏ frontend —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000');
        log('3. –ï—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testAllFixes().catch(console.error);
