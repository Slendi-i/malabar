#!/usr/bin/env node

/**
 * üöÄ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò –ê–í–¢–û–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–î
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

const DB_PATH = './server/malabar.db';
const BACKUP_PATH = './server/malabar_backup.db';

const COLORS = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

function logStep(step, description) {
  log(`\nüîß –®–∞–≥ ${step}: ${description}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

async function checkDatabaseFile() {
  logStep(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
  
  try {
    if (!fs.existsSync(DB_PATH)) {
      logError(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${DB_PATH}`);
      return false;
    }
    
    const stats = fs.statSync(DB_PATH);
    logSuccess(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(2)} KB`);
    
    if (stats.size === 0) {
      logError('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ (0 –±–∞–π—Ç)');
      return false;
    }
    
    if (stats.size < 1024) {
      logWarning('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å');
    }
    
    return true;
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ –ë–î: ${error.message}`);
    return false;
  }
}

async function testDatabaseConnection() {
  logStep(2, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
  
  return new Promise((resolve) => {
    const db = new sqlite3.Database(DB_PATH, sqlite3.OPEN_READWRITE, (err) => {
      if (err) {
        logError(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: ${err.message}`);
        resolve(false);
        return;
      }
      
      logSuccess('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      db.get("SELECT COUNT(*) as count FROM sqlite_master WHERE type='table'", (err, row) => {
        if (err) {
          logError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${err.message}`);
          db.close();
          resolve(false);
          return;
        }
        
        logSuccess(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î: ${row.count}`);
        db.close();
        resolve(true);
      });
    });
  });
}

async function checkPlayersTable() {
  logStep(3, '–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã players');
  
  return new Promise((resolve) => {
    const db = new sqlite3.Database(DB_PATH, sqlite3.OPEN_READWRITE);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='players'", (err, row) => {
      if (err) {
        logError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`);
        db.close();
        resolve(false);
        return;
      }
      
      if (!row) {
        logError('–¢–∞–±–ª–∏—Ü–∞ players –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        db.close();
        resolve(false);
        return;
      }
      
      logSuccess('–¢–∞–±–ª–∏—Ü–∞ players –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
      db.all("PRAGMA table_info(players)", (err, columns) => {
        if (err) {
          logError(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`);
          db.close();
          resolve(false);
          return;
        }
        
        logInfo('–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã players:');
        columns.forEach(col => {
          log(`  - ${col.name}: ${col.type} ${col.notnull ? 'NOT NULL' : ''} ${col.dflt_value ? `DEFAULT ${col.dflt_value}` : ''}`, 'white');
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        const hasX = columns.some(col => col.name === 'x');
        const hasY = columns.some(col => col.name === 'y');
        const hasId = columns.some(col => col.name === 'id');
        const hasName = columns.some(col => col.name === 'name');
        
        if (!hasId) {
          logError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü id');
          db.close();
          resolve(false);
          return;
        }
        
        if (!hasName) {
          logError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü name');
          db.close();
          resolve(false);
          return;
        }
        
        if (!hasX || !hasY) {
          logWarning('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç x –∏–ª–∏ y');
        } else {
          logSuccess('–°—Ç–æ–ª–±—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞–π–¥–µ–Ω—ã');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        db.get("SELECT COUNT(*) as count FROM players", (err, countRow) => {
          if (err) {
            logError(`–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–ø–∏—Å–µ–π: ${err.message}`);
            db.close();
            resolve(false);
            return;
          }
          
          logInfo(`–ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ players: ${countRow.count}`);
          
          if (countRow.count === 0) {
            logWarning('–¢–∞–±–ª–∏—Ü–∞ players –ø—É—Å—Ç–∞');
          } else {
            logSuccess(`–ù–∞–π–¥–µ–Ω–æ ${countRow.count} –∏–≥—Ä–æ–∫–æ–≤`);
          }
          
          db.close();
          resolve(true);
        });
      });
    });
  });
}

async function fixCoordinateColumns() {
  logStep(4, '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  
  return new Promise((resolve) => {
    const db = new sqlite3.Database(DB_PATH, sqlite3.OPEN_READWRITE);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ x –∏ y
    db.all("PRAGMA table_info(players)", (err, columns) => {
      if (err) {
        logError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: ${err.message}`);
        db.close();
        resolve(false);
        return;
      }
      
      const hasX = columns.some(col => col.name === 'x');
      const hasY = columns.some(col => col.name === 'y');
      
      if (hasX && hasY) {
        logSuccess('–°—Ç–æ–ª–±—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
        db.close();
        resolve(true);
        return;
      }
      
      logInfo('–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
      
      const addColumns = [];
      if (!hasX) addColumns.push('ALTER TABLE players ADD COLUMN x REAL DEFAULT NULL');
      if (!hasY) addColumns.push('ALTER TABLE players ADD COLUMN y REAL DEFAULT NULL');
      
      let completed = 0;
      let hasError = false;
      
      addColumns.forEach(sql => {
        db.run(sql, (err) => {
          if (err) {
            logError(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞: ${err.message}`);
            hasError = true;
          } else {
            logSuccess(`–°—Ç–æ–ª–±–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω: ${sql.includes(' x ') ? 'x' : 'y'}`);
          }
          
          completed++;
          if (completed === addColumns.length) {
            db.close();
            resolve(!hasError);
          }
        });
      });
      
      if (addColumns.length === 0) {
        db.close();
        resolve(true);
      }
    });
  });
}

async function testCoordinatesUpdate() {
  logStep(5, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  
  return new Promise((resolve) => {
    const db = new sqlite3.Database(DB_PATH, sqlite3.OPEN_READWRITE);
    
    // –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    db.get("SELECT id FROM players LIMIT 1", (err, row) => {
      if (err) {
        logError(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞: ${err.message}`);
        db.close();
        resolve(false);
        return;
      }
      
      if (!row) {
        logWarning('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        db.close();
        resolve(true);
        return;
      }
      
      const testPlayerId = row.id;
      const testX = 999.99;
      const testY = 888.88;
      
      logInfo(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞ ${testPlayerId}...`);
      
      const sql = 'UPDATE players SET x = ?, y = ? WHERE id = ?';
      db.run(sql, [testX, testY, testPlayerId], function(err) {
        if (err) {
          logError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${err.message}`);
          db.close();
          resolve(false);
          return;
        }
        
        if (this.changes === 0) {
          logError('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –∑–∞–ø–∏—Å–∏');
          db.close();
          resolve(false);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        db.get("SELECT x, y FROM players WHERE id = ?", [testPlayerId], (err, checkRow) => {
          if (err) {
            logError(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${err.message}`);
            db.close();
            resolve(false);
            return;
          }
          
          if (checkRow.x === testX && checkRow.y === testY) {
            logSuccess(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: (${checkRow.x}, ${checkRow.y})`);
          } else {
            logError(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å (${testX}, ${testY}), –ø–æ–ª—É—á–µ–Ω–æ (${checkRow.x}, ${checkRow.y})`);
            db.close();
            resolve(false);
            return;
          }
          
          db.close();
          resolve(true);
        });
      });
    });
  });
}

async function createBackup() {
  logStep(6, '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î');
  
  try {
    if (fs.existsSync(DB_PATH)) {
      fs.copyFileSync(DB_PATH, BACKUP_PATH);
      logSuccess(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${BACKUP_PATH}`);
      return true;
    } else {
      logError('–ò—Å—Ö–æ–¥–Ω–∞—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏');
      return false;
    }
  } catch (error) {
    logError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`);
    return false;
  }
}

async function runFullDiagnosis() {
  log('\nüöÄ –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•', 'magenta');
  log('==========================================', 'magenta');
  
  const results = {
    fileCheck: false,
    connectionTest: false,
    tableCheck: false,
    coordinatesFix: false,
    updateTest: false,
    backupCreated: false
  };
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
  results.backupCreated = await createBackup();
  
  results.fileCheck = await checkDatabaseFile();
  if (!results.fileCheck) {
    log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª –ë–î –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'red');
    return results;
  }
  
  results.connectionTest = await testDatabaseConnection();
  if (!results.connectionTest) {
    log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î', 'red');
    return results;
  }
  
  results.tableCheck = await checkPlayersTable();
  if (!results.tableCheck) {
    log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π players', 'red');
    return results;
  }
  
  results.coordinatesFix = await fixCoordinateColumns();
  if (!results.coordinatesFix) {
    log('\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 'yellow');
  }
  
  results.updateTest = await testCoordinatesUpdate();
  if (!results.updateTest) {
    log('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'red');
    return results;
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò', 'magenta');
  log('========================', 'magenta');
  
  Object.entries(results).forEach(([test, result]) => {
    const status = result ? '‚úÖ' : '‚ùå';
    const testNames = {
      fileCheck: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ë–î',
      connectionTest: '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
      tableCheck: '–ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã players',
      coordinatesFix: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤',
      updateTest: '–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç',
      backupCreated: '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏'
    };
    log(`${status} ${testNames[test]}`, result ? 'green' : 'red');
  });
  
  const allCriticalPassed = results.fileCheck && results.connectionTest && 
                           results.tableCheck && results.updateTest;
  
  if (allCriticalPassed) {
    log('\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!', 'green');
    log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.', 'green');
  } else {
    log('\nüí• –ù–ê–ô–î–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!', 'red');
    log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π.', 'red');
  }
  
  return results;
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  runFullDiagnosis().catch(error => {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { runFullDiagnosis };
