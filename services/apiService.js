import { API_ENDPOINTS } from '../config/api';

class ApiService {
  // Generic fetch wrapper with error handling
    async fetchWithErrorHandling(url, options = {}) {
    try {
      const response = await fetch(url, {
        credentials: 'include', // –í–∫–ª—é—á–∞–µ–º cookies –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('API request failed:', error);
      // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç frontend –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ë–î!
      // –ü—É—Å—Ç—å frontend —Å–∞–º —Ä–µ—à–∞–µ—Ç —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      throw error;
    }
  }

  // Players API
  async getPlayers() {
    return this.fetchWithErrorHandling(API_ENDPOINTS.PLAYERS);
  }

  async updatePlayer(id, playerData) {
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/${id}`, {
      method: 'PUT',
      body: JSON.stringify(playerData)
    });
  }

  // Users API
  async getCurrentUser() {
    try {
      return await this.fetchWithErrorHandling(API_ENDPOINTS.CURRENT_USER);
    } catch (error) {
      if (error.message.includes('401')) {
        // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
      }
      throw error;
    }
  }

  async setCurrentUser(userData) {
    return this.fetchWithErrorHandling(API_ENDPOINTS.CURRENT_USER, {
      method: 'POST',
      body: JSON.stringify(userData)
    });
  }

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º setCurrentUser –¥–ª—è –ª–æ–≥–∏–Ω–∞)
  async login(username, password) {
    return this.setCurrentUser({
      username: username,
      isLoggedIn: true
    });
  }

  async logout() {
    return this.setCurrentUser({
      username: '',
      isLoggedIn: false
    });
  }

  // Health check
  async healthCheck() {
    return this.fetchWithErrorHandling(API_ENDPOINTS.HEALTH);
  }

  // Batch update players (for efficiency) - Fixed to use single API call
  async batchUpdatePlayers(players) {
    return this.fetchWithErrorHandling(API_ENDPOINTS.PLAYERS, {
      method: 'PUT',
      body: JSON.stringify(players)
    });
  }

  // Update single player with detailed data
  async updatePlayerDetailed(id, playerData) {
    console.log(`Updating player ${id} with data:`, playerData);
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/${id}`, {
      method: 'PUT',
      body: JSON.stringify(playerData)
    });
  }

  // Update player games specifically
  async updatePlayerGames(id, games) {
    console.log(`Updating games for player ${id}:`, games);
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/${id}/games`, {
      method: 'POST',
      body: JSON.stringify({ games })
    });
  }

  // Update player social links specifically
  async updatePlayerSocial(id, socialLinks) {
    console.log(`Updating social links for player ${id}:`, socialLinks);
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/${id}/social`, {
      method: 'POST',
      body: JSON.stringify({ socialLinks })
    });
  }

  // Get real-time updates since timestamp
  async getUpdates(since = 0) {
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/updates?since=${since}`);
  }

  // Get specific player by ID
  async getPlayer(id) {
    return this.fetchWithErrorHandling(`${API_ENDPOINTS.PLAYERS}/${id}`);
  }

  // üî• –†–ê–î–ò–ö–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π endpoint!
  async updatePlayerCoordinates(id, x, y) {
    console.log(`üî• RADICAL: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞ ${id}: (${x}, ${y})`);
    
    try {
      const response = await fetch(`${API_ENDPOINTS.COORDINATES}/${id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          x: parseFloat(x),
          y: parseFloat(y)
        }),
      });
      
      console.log(`üî• RADICAL: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`üî• RADICAL: HTTP ${response.status} –æ—à–∏–±–∫–∞:`, errorText);
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
      const responseData = await response.json();
      console.log(`‚úÖ RADICAL: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`, responseData);
      return responseData;
      
    } catch (error) {
      console.error(`‚ùå RADICAL: –û—à–∏–±–∫–∞:`, error);
      throw error;
    }
  }
}

export default new ApiService();
