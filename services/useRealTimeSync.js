import { useEffect, useRef, useCallback, useState } from 'react';
import { API_ENDPOINTS } from '../config/api';

export function useRealTimeSync(onPlayersUpdate, onUserUpdate) {
  const ws = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const reconnectAttempts = useRef(0);
  const maxReconnectAttempts = 999; // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
  const baseReconnectDelay = 10000; // –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
  const lastConnectAttemptRef = useRef(0);
  const heartbeatIntervalRef = useRef(null);
  const lastHeartbeatRef = useRef(Date.now());
  const [connectionStatus, setConnectionStatus] = useState('disconnected');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ heartbeat
  const startHeartbeat = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
    }
    
    lastHeartbeatRef.current = Date.now();
    
    heartbeatIntervalRef.current = setInterval(() => {
      const now = Date.now();
      const timeSinceLastHeartbeat = now - lastHeartbeatRef.current;
      
      // –ï—Å–ª–∏ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping  
      if (timeSinceLastHeartbeat > 30000) {
        if (ws.current && ws.current.readyState === WebSocket.OPEN) {
          try {
            ws.current.send(JSON.stringify({ type: 'ping', timestamp: now }));
          } catch (error) {
            console.error('Failed to send heartbeat ping:', error);
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ ping
            if (ws.current) {
              ws.current.close();
            }
          }
        }
      }
    }, 15000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ heartbeat
  const stopHeartbeat = useCallback(() => {
    if (heartbeatIntervalRef.current) {
      clearInterval(heartbeatIntervalRef.current);
      heartbeatIntervalRef.current = null;
    }
  }, []);

  const connect = useCallback(() => {
    if (typeof window === 'undefined') return;

    try {
      // –¢—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
      const now = Date.now();
      const sinceLast = now - lastConnectAttemptRef.current;
      if (sinceLast < baseReconnectDelay) {
        const wait = baseReconnectDelay - sinceLast;
        console.log(`üîå WebSocket: –∂–¥—ë–º ${wait}–º—Å –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º`);
        if (!reconnectTimeoutRef.current) {
          reconnectTimeoutRef.current = setTimeout(() => {
            reconnectTimeoutRef.current = null;
            connect();
          }, wait);
        }
        return;
      }
      lastConnectAttemptRef.current = now;

      // Close existing connection if any
      if (ws.current) {
        ws.current.close();
      }

      setConnectionStatus('connecting');
      
      ws.current = new WebSocket(API_ENDPOINTS.WEBSOCKET);

      ws.current.onopen = () => {
        console.log('üîó WebSocket: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
        setConnectionStatus('connected');
        reconnectAttempts.current = 0;
        startHeartbeat();
      };

      ws.current.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (heartbeat)
          lastHeartbeatRef.current = Date.now();
          
          switch (message.type) {
            case 'coordinates':
              // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞
              if (onPlayersUpdate && message.data.id && message.data.x !== undefined && message.data.y !== undefined) {
                console.log('üìç WebSocket: –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞', message.data.id);
                onPlayersUpdate('coordinates', message.data, message.data.id);
              }
              break;
              
            case 'profile':
              // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞
              if (onPlayersUpdate && message.data.player && message.data.id) {
                console.log('üìù WebSocket: –ü–æ–ª—É—á–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞', message.data.id);
                onPlayersUpdate('profile', message.data.player, message.data.id);
              }
              break;
              
            case 'player_updated':
              // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
              if (onPlayersUpdate && message.data.player) {
                onPlayersUpdate('profile', message.data.player, message.data.id);
              }
              break;
              
            case 'players_batch_updated':
              if (onPlayersUpdate && message.data.players) {
                onPlayersUpdate('initial_load', message.data.players);
              }
              break;
              
            case 'user_logged_in':
              if (onUserUpdate && message.data) {
                onUserUpdate('login', message.data);
              }
              break;
              
            case 'ping':
              // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ ping —Å–µ—Ä–≤–µ—Ä–∞
              if (ws.current && ws.current.readyState === WebSocket.OPEN) {
                ws.current.send(JSON.stringify({ type: 'pong' }));
              }
              break;
              
            case 'pong':
              // –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞—à ping
              break;
              
            default:
              console.log('Unknown WebSocket message type:', message.type);
          }
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      };

      ws.current.onclose = (event) => {
        console.log(`‚ùå WebSocket: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. Code: ${event.code}, Reason: ${event.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        setConnectionStatus('disconnected');
        stopHeartbeat();
        
        // Attempt to reconnect if not manually closed
        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {
          // –§–∏–∫—Å–∏—Ä—É–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –Ω–µ –º–µ–Ω–µ–µ 10 —Å–µ–∫—É–Ω–¥
          const delay = baseReconnectDelay;
          console.log(`üîÑ WebSocket: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttempts.current + 1}/${maxReconnectAttempts})`);
          setConnectionStatus('reconnecting');
          
          reconnectTimeoutRef.current = setTimeout(() => {
            reconnectAttempts.current++;
            connect();
          }, delay);
        } else if (reconnectAttempts.current >= maxReconnectAttempts) {
          console.warn('Max reconnection attempts reached.');
          setConnectionStatus('failed');
          // üöÄ –£–ë–†–ê–õ–ò HTTP polling - –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î!
        }
      };

      ws.current.onerror = (error) => {
        console.error('WebSocket error:', error);
        setConnectionStatus('error');
        // üöÄ –£–ë–†–ê–õ–ò HTTP polling - –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!
      };

    } catch (error) {
      console.error('Failed to create WebSocket connection:', error);
      setConnectionStatus('error');
      // üöÄ –£–ë–†–ê–õ–ò HTTP polling - –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!
    }
  }, [onPlayersUpdate, onUserUpdate]);

  // üöÄ –£–ë–†–ê–õ–ò HTTP polling - –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î!
  // –¢–µ–ø–µ—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ WebSocket

  const disconnect = useCallback(() => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      clearInterval(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }
    
    stopHeartbeat();
    
    if (ws.current) {
      ws.current.close(1000, 'Component unmounting');
      ws.current = null;
    }
    
    setConnectionStatus('disconnected');
  }, []);

  // Connect on mount, disconnect on unmount
  useEffect(() => {
    connect();
    
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);

  // Expose connection status and manual controls
  return {
    isConnected: ws.current?.readyState === WebSocket.OPEN,
    connectionStatus,
    connect,
    disconnect,
    reconnect: () => {
      disconnect();
      setTimeout(() => {
        connect();
      }, 100);
    }
  };
}
