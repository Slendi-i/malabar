#!/usr/bin/env node

/**
 * üî• –ë–´–°–¢–†–´–ô –¢–ï–°–¢ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
 */

const axios = require('axios');

const API_BASE = 'http://localhost:3001';

async function quickTest() {
  console.log('üî• –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ö–û–û–†–î–ò–ù–ê–¢');
  console.log('========================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const health = await axios.get(`${API_BASE}/api/health`);
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: ${health.status}`);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    console.log(`‚úÖ –ò–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: ${playersResponse.data.players.length}`);
    
    if (playersResponse.data.players.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const testPlayer = playersResponse.data.players[0];
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ ${testPlayer.id}: ${testPlayer.name}`);
    console.log(`üìç –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${testPlayer.x}, y=${testPlayer.y}`);
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π endpoint
    console.log('\n3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
    const newX = Math.round(Math.random() * 800);
    const newY = Math.round(Math.random() * 600);
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${newX}, y=${newY}`);
    
    const updateResponse = await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
      x: newX,
      y: newY
    });
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: ${updateResponse.status}`);
    console.log(`üìã –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, updateResponse.data);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const checkResponse = await axios.get(`${API_BASE}/api/players`);
    const updatedPlayer = checkResponse.data.players.find(p => p.id === testPlayer.id);
    
    console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    
    if (updatedPlayer.x === newX && updatedPlayer.y === newY) {
      console.log('\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
      console.log('üî• –¢–µ–ø–µ—Ä—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ HTTP 500 –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–Ω—É—Ç—å!');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!');
      console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: x=${newX}, y=${newY}`);
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.response?.status || error.message);
    if (error.response?.data) {
      console.error('üìã –î–µ—Ç–∞–ª–∏:', error.response.data);
    }
    
    console.log('\nüí° –†–ï–®–ï–ù–ò–Ø:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && node server.js');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: node diagnose-and-fix-db.js');
  }
}

quickTest();
