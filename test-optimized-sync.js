#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

const WebSocket = require('ws');
const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE = process.env.NODE_ENV === 'production' ? 'https://malabar-event.ru:3001' : 'http://localhost:3001';
const WS_URL = process.env.NODE_ENV === 'production' ? 'wss://malabar-event.ru:3001/ws' : 'ws://localhost:3001/ws';
const COLORS = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function log(message, color = 'white') {
  console.log(`${COLORS[color]}${message}${COLORS.reset}`);
}

function logStep(step, description) {
  log(`\nüìã –®–∞–≥ ${step}: ${description}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

let testResults = {
  passed: 0,
  failed: 0,
  warnings: 0
};

function assert(condition, message, isWarning = false) {
  if (condition) {
    logSuccess(message);
    testResults.passed++;
  } else {
    if (isWarning) {
      logWarning(message);
      testResults.warnings++;
    } else {
      logError(message);
      testResults.failed++;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function testServerHealth() {
  logStep(1, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞');
  
  try {
    const response = await axios.get(`${API_BASE}/api/health`);
    assert(response.status === 200, '–°–µ—Ä–≤–µ—Ä API –¥–æ—Å—Ç—É–ø–µ–Ω');
    assert(response.data.status === 'OK', 'API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    logInfo(`–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.data.timestamp}`);
  } catch (error) {
    assert(false, `–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    return false;
  }
  return true;
}

async function testWebSocketConnection() {
  logStep(2, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
  
  return new Promise((resolve) => {
    const startTime = Date.now();
    const ws = new WebSocket(WS_URL);
    
    let connectionTime = null;
    let pingReceived = false;
    let pongReceived = false;
    
    ws.on('open', () => {
      connectionTime = Date.now() - startTime;
      assert(connectionTime < 1000, `WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–µ (${connectionTime}ms < 1000ms)`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º heartbeat
      ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));
    });
    
    ws.on('message', (data) => {
      try {
        const message = JSON.parse(data.toString());
        
        if (message.type === 'pong') {
          pongReceived = true;
          assert(true, '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç pong –Ω–∞ ping');
        } else if (message.type === 'ping') {
          pingReceived = true;
          assert(true, '–ü–æ–ª—É—á–µ–Ω ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
          // –û—Ç–≤–µ—á–∞–µ–º pong
          ws.send(JSON.stringify({ type: 'pong' }));
        }
      } catch (error) {
        assert(false, `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      }
    });
    
    ws.on('error', (error) => {
      assert(false, `–û—à–∏–±–∫–∞ WebSocket: ${error.message}`);
      resolve();
    });
    
    ws.on('close', () => {
      logInfo('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      resolve();
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      assert(pongReceived || pingReceived, 'Heartbeat —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç', true);
      ws.close();
    }, 5000);
  });
}

async function testCoordinateSync() {
  logStep(3, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    assert(playersResponse.status === 200, '–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
    
    const players = playersResponse.data.players;
    assert(players && players.length > 0, '–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π');
    
    if (players.length > 0) {
      const testPlayer = players[0];
      const originalX = testPlayer.x || 0;
      const originalY = testPlayer.y || 0;
      
      // –°–æ–∑–¥–∞–µ–º WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const ws = new WebSocket(WS_URL);
      
      return new Promise((resolve) => {
        let updateReceived = false;
        const startTime = Date.now();
        
        ws.on('message', (data) => {
          try {
            const message = JSON.parse(data.toString());
            if (message.type === 'coordinates' && message.data.id === testPlayer.id) {
              const responseTime = Date.now() - startTime;
              updateReceived = true;
              assert(responseTime < 500, `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –±—ã—Å—Ç—Ä–æ (${responseTime}ms < 500ms)`);
              assert(message.data.x === 999 && message.data.y === 999, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
              ws.close();
              resolve();
            }
          } catch (error) {
            logError(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
          }
        });
        
        ws.on('open', async () => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞
          try {
            await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
              x: 999,
              y: 999
            });
            logInfo('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
          } catch (error) {
            assert(false, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
            ws.close();
            resolve();
          }
        });
        
        // –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞
        setTimeout(() => {
          if (!updateReceived) {
            assert(false, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥');
          }
          ws.close();
          resolve();
        }, 10000);
      });
    }
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${error.message}`);
  }
}

async function testProfileSync() {
  logStep(4, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  
  try {
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    const players = playersResponse.data.players;
    
    if (players.length > 0) {
      const testPlayer = players[0];
      const originalName = testPlayer.name;
      
      const ws = new WebSocket(WS_URL);
      
      return new Promise((resolve) => {
        let profileUpdateReceived = false;
        
        ws.on('message', (data) => {
          try {
            const message = JSON.parse(data.toString());
            if (message.type === 'profile' && message.data.id === testPlayer.id) {
              profileUpdateReceived = true;
              assert(message.data.player.name === 'Test Profile Sync', '–ü—Ä–æ—Ñ–∏–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
              ws.close();
              resolve();
            }
          } catch (error) {
            logError(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
          }
        });
        
        ws.on('open', async () => {
          try {
            await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
              name: 'Test Profile Sync'
            });
            logInfo('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } catch (error) {
            assert(false, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
            ws.close();
            resolve();
          }
        });
        
        setTimeout(() => {
          if (!profileUpdateReceived) {
            assert(false, '–ü—Ä–æ—Ñ–∏–ª—å –ù–ï —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥');
          }
          ws.close();
          resolve();
        }, 5000);
      });
    }
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
  }
}

async function testReconnectionSpeed() {
  logStep(5, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  
  return new Promise((resolve) => {
    const ws = new WebSocket(WS_URL);
    let connectionCount = 0;
    let reconnectionTimes = [];
    
    ws.on('open', () => {
      connectionCount++;
      if (connectionCount === 1) {
        logInfo('–ü–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws.close(1000, 'Test reconnection');
      } else {
        const reconnectionTime = Date.now() - lastCloseTime;
        reconnectionTimes.push(reconnectionTime);
        assert(reconnectionTime < 1000, `–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (${reconnectionTime}ms < 1000ms)`);
        ws.close();
        resolve();
      }
    });
    
    let lastCloseTime;
    ws.on('close', () => {
      lastCloseTime = Date.now();
      if (connectionCount === 1) {
        logInfo('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => {
          const newWs = new WebSocket(WS_URL);
          newWs.on('open', () => {
            connectionCount++;
            const reconnectionTime = Date.now() - lastCloseTime;
            assert(reconnectionTime < 1000, `–ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (${reconnectionTime}ms < 1000ms)`);
            newWs.close();
            resolve();
          });
          newWs.on('error', () => {
            assert(false, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            resolve();
          });
        }, 100);
      }
    });
    
    ws.on('error', (error) => {
      assert(false, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
      resolve();
    });
    
    // –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞
    setTimeout(() => {
      assert(false, '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥');
      resolve();
    }, 10000);
  });
}

async function testDebouncingOptimization() {
  logStep(6, '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ debouncing');
  
  try {
    const playersResponse = await axios.get(`${API_BASE}/api/players`);
    const players = playersResponse.data.players;
    
    if (players.length > 0) {
      const testPlayer = players[0];
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
      const updates = [];
      const startTime = Date.now();
      
      for (let i = 0; i < 5; i++) {
        const updateStart = Date.now();
        try {
          await axios.put(`${API_BASE}/api/players/${testPlayer.id}`, {
            x: 100 + i,
            y: 100 + i
          });
          const updateTime = Date.now() - updateStart;
          updates.push(updateTime);
          logInfo(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${i + 1}: ${updateTime}ms`);
        } catch (error) {
          assert(false, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${i + 1}: ${error.message}`);
        }
        
        await delay(50); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      }
      
      const avgUpdateTime = updates.reduce((a, b) => a + b, 0) / updates.length;
      assert(avgUpdateTime < 100, `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–µ (${avgUpdateTime.toFixed(2)}ms < 100ms)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ debouncing —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      await delay(200); // –ñ–¥–µ–º —á—Ç–æ–±—ã debouncing —Å—Ä–∞–±–æ—Ç–∞–ª
      
      const finalState = await axios.get(`${API_BASE}/api/players/${testPlayer.id}`);
      assert(finalState.data.x === 104 && finalState.data.y === 104, '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ—Å–ª–µ debouncing');
    }
  } catch (error) {
    assert(false, `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è debouncing: ${error.message}`);
  }
}

async function runAllTests() {
  log('\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò', 'magenta');
  log('=========================================================', 'magenta');
  
  const serverOk = await testServerHealth();
  if (!serverOk) {
    log('\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã', 'red');
    return;
  }
  
  await testWebSocketConnection();
  await delay(1000);
  
  await testCoordinateSync();
  await delay(1000);
  
  await testProfileSync();
  await delay(1000);
  
  await testReconnectionSpeed();
  await delay(1000);
  
  await testDebouncingOptimization();
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'magenta');
  log('========================', 'magenta');
  logSuccess(`–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.passed}`);
  if (testResults.warnings > 0) {
    logWarning(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${testResults.warnings}`);
  }
  if (testResults.failed > 0) {
    logError(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${testResults.failed}`);
  } else {
    logSuccess('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  }
  
  log('\nüí° –£–õ–£–ß–®–ï–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:', 'cyan');
  log('‚Ä¢ Heartbeat WebSocket: 30s ‚Üí 10s', 'white');
  log('‚Ä¢ Ping –∏–Ω—Ç–µ—Ä–≤–∞–ª: 60s ‚Üí 20s', 'white');
  log('‚Ä¢ Debouncing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: 500ms ‚Üí 150ms', 'white');
  log('‚Ä¢ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: 500ms ‚Üí 250ms', 'white');
  log('‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', 'white');
  log('‚Ä¢ –ù–∞–¥–µ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —á–µ—Ä–µ–∑ ref –≤–º–µ—Å—Ç–æ window', 'white');
  log('‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'white');
  log('‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: 60s ‚Üí 20s', 'white');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(error => {
    logError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { runAllTests };
