#!/usr/bin/env node

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç

const API_BASE = 'http://localhost:3001';

async function testEndpoint() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health check...');
    const healthResponse = await fetch(`${API_BASE}/api/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('\n2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤...');
    const debugResponse = await fetch(`${API_BASE}/api/debug/players`);
    const debugData = await debugResponse.json();
    console.log('üìä –ò–≥—Ä–æ–∫–∏ –≤ –ë–î:', debugData);
    
    if (debugData.players.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!');
      return;
    }
    
    // 3. –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const testPlayerId = debugData.players[0].id;
    const testCoordinates = { x: 123.45, y: 678.90 };
    
    console.log(`\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${testPlayerId}...`);
    console.log(`üìç –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:`, testCoordinates);
    
    const updateResponse = await fetch(`${API_BASE}/api/players/${testPlayerId}/coordinates`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testCoordinates)
    });
    
    console.log(`üì° Response status: ${updateResponse.status}`);
    
    if (updateResponse.ok) {
      const updateData = await updateResponse.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', updateData);
    } else {
      const errorText = await updateResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', errorText);
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const checkResponse = await fetch(`${API_BASE}/api/debug/players`);
    const checkData = await checkResponse.json();
    const updatedPlayer = checkData.players.find(p => p.id === testPlayerId);
    console.log(`üîç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ ${testPlayerId}:`, { x: updatedPlayer.x, y: updatedPlayer.y });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEndpoint();
