#!/usr/bin/env node

/**
 * üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è: WebSocket, –ø—Ä–æ—Ñ–∏–ª–∏, debouncing, —É–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 */

const API_BASE = 'http://localhost:3001';

async function optimizedTest() {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø');
  console.log('==========================================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    const healthResponse = await fetch(`${API_BASE}/api/health`);
    if (!healthResponse.ok) {
      throw new Error(`–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${healthResponse.status}`);
    }
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const playersResponse = await fetch(`${API_BASE}/api/players`);
    const playersData = await playersResponse.json();
    const players = playersData.players;
    
    if (players.length === 0) {
      throw new Error('–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    const testPlayer = players[0];
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ ${testPlayer.id}: ${testPlayer.name}`);
    console.log(`üìç –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${testPlayer.x}, y=${testPlayer.y}`);
    
    // 3. –¢–µ—Å—Ç 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è)
    console.log('\n3. –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    const testX1 = testPlayer.x + 0.5; // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const testY1 = testPlayer.y + 0.5;
    
    console.log(`üì§ PATCH ${API_BASE}/api/coordinates/${testPlayer.id}`);
    console.log(`üì§ –î–∞–Ω–Ω—ã–µ: {x: ${testX1}, y: ${testY1}} (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)`);
    
    const patchResponse1 = await fetch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        x: testX1,
        y: testY1
      })
    });
    
    const patchData1 = await patchResponse1.json();
    console.log(`üìä PATCH —Å—Ç–∞—Ç—É—Å: ${patchResponse1.status}`);
    console.log(`üìã –û—Ç–≤–µ—Ç:`, patchData1);
    
    if (patchData1.skipped) {
      console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã');
    }
    
    // 4. –¢–µ—Å—Ç 2: –ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è)
    console.log('\n4. –¢–µ—Å—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    const testX2 = Math.round(Math.random() * 800);
    const testY2 = Math.round(Math.random() * 600);
    
    console.log(`üì§ PATCH ${API_BASE}/api/coordinates/${testPlayer.id}`);
    console.log(`üì§ –î–∞–Ω–Ω—ã–µ: {x: ${testX2}, y: ${testY2}} (–∑–Ω–∞—á–∏–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)`);
    
    const patchResponse2 = await fetch(`${API_BASE}/api/coordinates/${testPlayer.id}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        x: testX2,
        y: testY2
      })
    });
    
    const patchData2 = await patchResponse2.json();
    console.log(`üìä PATCH —Å—Ç–∞—Ç—É—Å: ${patchResponse2.status}`);
    console.log(`üìã –û—Ç–≤–µ—Ç:`, patchData2);
    
    if (patchData2.success && !patchData2.skipped) {
      console.log('‚úÖ –ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
    } else {
      console.log('‚ùå –ó–Ω–∞—á–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const checkResponse = await fetch(`${API_BASE}/api/players`);
    const checkData = await checkResponse.json();
    const updatedPlayer = checkData.players.find(p => p.id === testPlayer.id);
    
    console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    
    if (updatedPlayer.x === testX2 && updatedPlayer.y === testY2) {
      console.log('\nüéâ –í–°–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –†–ê–ë–û–¢–ê–Æ–¢!');
      console.log('üöÄ WebSocket —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      console.log('üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —É–ª—É—á—à–µ–Ω–∞');
      console.log('üöÄ Debouncing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.log('üöÄ –£–º–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
      console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin');
      console.log('3. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ª—é–±—É—é —Ñ–∏—à–∫—É');
      console.log('4. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –±—ã—Å—Ç—Ä–æ–π –∏ —É–º–Ω–æ–π!');
      console.log('\nüî• –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:');
      console.log('‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏');
      console.log('‚Ä¢ –£–º–Ω–æ–µ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏–µ –º–µ–ª–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π');
      console.log('‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π');
      console.log('‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
    } else {
      console.log('\n‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!');
      console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: x=${testX2}, y=${testY2}`);
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –¢–ï–°–¢–ê:');
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pm2 restart malabar-server');
    }
  }
}

optimizedTest();
