#!/usr/bin/env node

/**
 * üöÄ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø SSR –û–®–ò–ë–ö–ò
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ API –≤—ã–∑–æ–≤—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
global.window = undefined;
global.document = undefined;

console.log('üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ SSR –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
console.log('================================');

// –¢–µ—Å—Ç 1: apiService –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
console.log('\n1. –¢–µ—Å—Ç apiService –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...');
try {
  const apiService = require('./services/apiService.js').default;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å API –º–µ—Ç–æ–¥
  apiService.getPlayers().then(() => {
    console.log('‚ùå –û–®–ò–ë–ö–ê: API –≤—ã–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!');
  }).catch(error => {
    if (error.message.includes('browser environment')) {
      console.log('‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: API –≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    } else {
      console.log('‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    }
  });
} catch (error) {
  console.log('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ apiService:', error.message);
}

// –¢–µ—Å—Ç 2: usePeriodicSync –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
console.log('\n2. –¢–µ—Å—Ç usePeriodicSync –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...');
try {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º React —Ö—É–∫–∏
  const mockSetPlayers = () => {};
  const mockSetCurrentUser = () => {};
  const mockCurrentUser = null;
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º useCallback
  const mockUseCallback = (fn) => fn;
  const mockUseRef = (initial) => ({ current: initial });
  const mockUseState = (initial) => [initial, () => {}];
  const mockUseEffect = (fn, deps) => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ä–∞–∑—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fn();
  };
  
  // –ú–æ–∫–∞–µ–º React
  const React = {
    useCallback: mockUseCallback,
    useRef: mockUseRef,
    useState: mockUseState,
    useEffect: mockUseEffect
  };
  
  // –ú–æ–∫–∞–µ–º apiService
  const mockApiService = {
    getPlayers: () => Promise.reject(new Error('Should not be called on server')),
    getCurrentUser: () => Promise.reject(new Error('Should not be called on server'))
  };
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
  const usePeriodicSyncModule = require('./services/usePeriodicSync.js');
  
  console.log('‚úÖ usePeriodicSync –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
  
} catch (error) {
  console.log('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ usePeriodicSync:', error.message);
}

// –¢–µ—Å—Ç 3: useRealTimeSync –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
console.log('\n3. –¢–µ—Å—Ç useRealTimeSync –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...');
try {
  const useRealTimeSyncModule = require('./services/useRealTimeSync.js');
  console.log('‚úÖ useRealTimeSync –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
} catch (error) {
  console.log('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ useRealTimeSync:', error.message);
}

console.log('\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù');
console.log('üìù –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, SSR –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!');
