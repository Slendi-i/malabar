// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

// –í server.js –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏ endpoints:

/*
// === –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í–°–ï–• –î–ê–ù–ù–´–• ===

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
app.put('/api/table', (req, res) => {
  const { tableData } = req.body;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç–æ–ª–∞ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
  // ... –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ...
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  broadcastUpdate('table_updated', { table: tableData });
  
  res.json({ success: true });
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—É–±–∏–∫–æ–≤
app.post('/api/dice/roll', (req, res) => {
  const { diceResults, playerId } = req.body;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞
  // ... –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ...
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  broadcastUpdate('dice_rolled', { 
    dice: diceResults, 
    playerId,
    timestamp: Date.now() 
  });
  
  res.json({ success: true, diceResults });
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–≥—Ä/—Ä–∞—É–Ω–¥–æ–≤
app.put('/api/game', (req, res) => {
  const { gameState } = req.body;
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  // ... –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ...
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  broadcastUpdate('game_updated', { game: gameState });
  
  res.json({ success: true });
});

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
app.post('/api/logs', (req, res) => {
  const { message, type, playerId } = req.body;
  
  const logEntry = {
    id: Date.now(),
    message,
    type,
    playerId,
    timestamp: new Date().toISOString()
  };
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ –ë–î
  db.run(`INSERT INTO logs (message, type, playerId, timestamp) VALUES (?, ?, ?, ?)`,
    [logEntry.message, logEntry.type, logEntry.playerId, logEntry.timestamp]);
  
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  broadcastUpdate('log_added', { log: logEntry });
  
  res.json({ success: true, log: logEntry });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
app.get('/api/logs', (req, res) => {
  const limit = req.query.limit || 100;
  
  db.all(`SELECT * FROM logs ORDER BY timestamp DESC LIMIT ?`, [limit], (err, rows) => {
    if (err) {
      return res.status(500).json({ error: 'Database error' });
    }
    res.json(rows || []);
  });
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
db.run(`CREATE TABLE IF NOT EXISTS logs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  message TEXT NOT NULL,
  type TEXT DEFAULT 'info',
  playerId INTEGER,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)`);
*/

console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
console.log('1. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –≤—ã—à–µ –≤ server.js');
console.log('2. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –≤ –ë–î'); 
console.log('3. –û–±–Ω–æ–≤–∏—Ç—å frontend –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π');
console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
