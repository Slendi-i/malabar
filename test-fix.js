#!/usr/bin/env node

/**
 * üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTTP 500 –∏—Å—á–µ–∑
 */

const API_BASE = 'http://localhost:3001';

async function testFix() {
  console.log('üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø HTTP 500');
  console.log('============================');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    console.log('\n1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...');
    const playersResponse = await fetch(`${API_BASE}/api/players`);
    const playersData = await playersResponse.json();
    const players = playersData.players;
    
    if (players.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    const testPlayer = players[0];
    console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ ${testPlayer.id}: ${testPlayer.name}`);
    console.log(`üìç –¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${testPlayer.x}, y=${testPlayer.y}`);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT –∑–∞–ø—Ä–æ—Å
    console.log('\n2. –¢–µ—Å—Ç PUT –∑–∞–ø—Ä–æ—Å–∞...');
    const testX = Math.round(Math.random() * 800);
    const testY = Math.round(Math.random() * 600);
    
    console.log(`üì§ PUT ${API_BASE}/api/players/${testPlayer.id}`);
    console.log(`üì§ –î–∞–Ω–Ω—ã–µ: {x: ${testX}, y: ${testY}}`);
    
    const putResponse = await fetch(`${API_BASE}/api/players/${testPlayer.id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        x: testX,
        y: testY
      })
    });
    
    console.log(`üìä PUT —Å—Ç–∞—Ç—É—Å: ${putResponse.status}`);
    
    if (putResponse.ok) {
      const putData = await putResponse.json();
      console.log(`‚úÖ PUT —É—Å–ø–µ—à–µ–Ω!`, putData);
      
      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
      const checkResponse = await fetch(`${API_BASE}/api/players`);
      const checkData = await checkResponse.json();
      const updatedPlayer = checkData.players.find(p => p.id === testPlayer.id);
      
      console.log(`üìç –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
      
      if (updatedPlayer.x === testX && updatedPlayer.y === testY) {
        console.log('\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
        console.log('üî• HTTP 500 –∏—Å—á–µ–∑! –¢–µ–ø–µ—Ä—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å!');
        console.log('\nüì± –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000');
        console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin');
        console.log('3. –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –ª—é–±—É—é —Ñ–∏—à–∫—É');
        console.log('4. HTTP 500 –±–æ–ª—å—à–µ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è!');
      } else {
        console.log('\n‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å!');
        console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å: x=${testX}, y=${testY}`);
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ: x=${updatedPlayer.x}, y=${updatedPlayer.y}`);
      }
    } else {
      const errorText = await putResponse.text();
      console.error(`‚ùå PUT –æ—à–∏–±–∫–∞: ${putResponse.status} - ${errorText}`);
      
      if (putResponse.status === 500) {
        console.log('\nüí° HTTP 500 –≤—Å—ë –µ—â—ë –µ—Å—Ç—å!');
        console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: cd server && node server.js');
        console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏');
        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: node diagnose-and-fix-db.js');
      }
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:');
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!');
      console.log('–ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd server && node server.js');
    }
  }
}

testFix();
