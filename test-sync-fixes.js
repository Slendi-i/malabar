#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è
 */

const http = require('http');
const WebSocket = require('ws');

const API_BASE = 'http://localhost:3001';
const WS_URL = 'ws://localhost:3001/ws';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    green: '\x1b[32m',
    red: '\x1b[31m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    reset: '\x1b[0m'
};

function log(message, color = colors.green) {
    console.log(`${color}[TEST]${colors.reset} ${message}`);
}

function error(message) {
    console.log(`${colors.red}[ERROR]${colors.reset} ${message}`);
}

function warn(message) {
    console.log(`${colors.yellow}[WARN]${colors.reset} ${message}`);
}

function info(message) {
    console.log(`${colors.blue}[INFO]${colors.reset} ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', chunk => body += chunk);
            res.on('end', () => {
                try {
                    const result = JSON.parse(body);
                    resolve({ status: res.statusCode, data: result });
                } catch (e) {
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });
        
        req.on('error', reject);
        
        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...\n');
    
    let testsPassed = 0;
    let testsFailed = 0;
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    try {
        info('–¢–µ—Å—Ç 1: Health check API');
        const response = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/health',
            method: 'GET'
        });
        
        if (response.status === 200 && response.data.status === 'OK') {
            log('‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç');
            testsPassed++;
        } else {
            error('‚ùå Health check –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            testsFailed++;
        }
    } catch (e) {
        error(`‚ùå Health check –æ—à–∏–±–∫–∞: ${e.message}`);
        testsFailed++;
    }
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    let initialPlayers = null;
    try {
        info('–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤');
        const response = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/players',
            method: 'GET'
        });
        
        if (response.status === 200 && response.data.players && Array.isArray(response.data.players)) {
            initialPlayers = response.data.players;
            log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ (${initialPlayers.length} –∏–≥—Ä–æ–∫–æ–≤)`);
            testsPassed++;
        } else {
            error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤');
            testsFailed++;
        }
    } catch (e) {
        error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: ${e.message}`);
        testsFailed++;
    }
    
    // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    if (initialPlayers && initialPlayers.length > 0) {
        try {
            info('–¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞');
            const testPlayer = initialPlayers[0];
            const testName = `Test Player ${Date.now()}`;
            
            const updateResponse = await makeRequest({
                hostname: 'localhost',
                port: 3001,
                path: `/api/players/${testPlayer.id}`,
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                }
            }, {
                ...testPlayer,
                name: testName
            });
            
            if (updateResponse.status === 200) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                const checkResponse = await makeRequest({
                    hostname: 'localhost',
                    port: 3001,
                    path: `/api/players/${testPlayer.id}`,
                    method: 'GET'
                });
                
                if (checkResponse.status === 200 && checkResponse.data.name === testName) {
                    log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                    testsPassed++;
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
                    await makeRequest({
                        hostname: 'localhost',
                        port: 3001,
                        path: `/api/players/${testPlayer.id}`,
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }, {
                        ...testPlayer,
                        name: testPlayer.name
                    });
                } else {
                    error('‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
                    testsFailed++;
                }
            } else {
                error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞');
                testsFailed++;
            }
        } catch (e) {
            error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: ${e.message}`);
            testsFailed++;
        }
    }
    
    // –¢–µ—Å—Ç 4: WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    try {
        info('–¢–µ—Å—Ç 4: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        
        const ws = new WebSocket(WS_URL);
        
        const wsTest = new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
                reject(new Error('WebSocket timeout'));
            }, 5000);
            
            ws.on('open', () => {
                clearTimeout(timeout);
                log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
                ws.close();
                resolve();
            });
            
            ws.on('error', (error) => {
                clearTimeout(timeout);
                reject(error);
            });
        });
        
        await wsTest;
        testsPassed++;
    } catch (e) {
        error(`‚ùå WebSocket –æ—à–∏–±–∫–∞: ${e.message}`);
        testsFailed++;
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ë–î –Ω–µ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    try {
        info('–¢–µ—Å—Ç 5: –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î');
        const response = await makeRequest({
            hostname: 'localhost',
            port: 3001,
            path: '/api/players',
            method: 'GET'
        });
        
        if (response.status === 200 && response.data.players && response.data.players.length > 0) {
            log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–∞—è)');
            testsPassed++;
        } else {
            warn('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
            testsPassed++;
        }
    } catch (e) {
        error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${e.message}`);
        testsFailed++;
    }
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`${colors.green}‚úÖ –ü—Ä–æ—à–ª–æ: ${testsPassed}${colors.reset}`);
    console.log(`${colors.red}‚ùå –ù–µ –ø—Ä–æ—à–ª–æ: ${testsFailed}${colors.reset}`);
    
    if (testsFailed === 0) {
        console.log(`\n${colors.green}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.${colors.reset}`);
    } else {
        console.log(`\n${colors.yellow}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.${colors.reset}`);
    }
    
    console.log('\nüìù –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å:');
    console.log('  ‚Ä¢ API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å');
    console.log('  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('  ‚Ä¢ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('  ‚Ä¢ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  ‚Ä¢ –ï—Å–ª–∏ WebSocket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä');
    console.log('  ‚Ä¢ –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
    console.log('  ‚Ä¢ –ü—Ä–∏ –ø—É—Å—Ç–æ–π –ë–î - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
    
    process.exit(testsFailed > 0 ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
    runTests().catch(error => {
        console.error(`\n${colors.red}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${colors.reset}`);
        process.exit(1);
    });
}

module.exports = { runTests };
