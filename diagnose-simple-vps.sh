#!/bin/bash

# –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∞—é—â–∏—Ö –∫–æ–º–∞–Ω–¥

echo "üîç –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
echo "================================="

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${GREEN}[OK]${NC} $1"; }
error() { echo -e "${RED}[PROBLEM]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

cd /var/www/malabar || { error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /var/www/malabar –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; }

echo "üìç –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"

echo ""
echo "üíæ 1. –ú–ï–°–¢–û –ù–ê –î–ò–°–ö–ï"
echo "==================="

df -h . | head -2
echo ""

DISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    error "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ $DISK_USAGE%! –ö—Ä–∏—Ç–∏—á–Ω–æ!"
elif [ "$DISK_USAGE" -gt 80 ]; then
    warn "–î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ $DISK_USAGE%"
else
    log "–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ($DISK_USAGE% –∑–∞–Ω—è—Ç–æ)"
fi

echo ""
echo "üìÅ 2. –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê"
echo "=================="

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
FILES=("package.json" "server/package.json" "server/server.js")
for file in "${FILES[@]}"; do
    if [ -f "$file" ]; then
        log "$file ‚úì"
    else
        error "$file –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
    fi
done

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
DIRS=("pages" "components" "server" "styles")
for dir in "${DIRS[@]}"; do
    if [ -d "$dir" ]; then
        log "$dir/ ‚úì"
    else
        error "$dir/ –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
    fi
done

echo ""
echo "üì¶ 3. –ó–ê–í–ò–°–ò–ú–û–°–¢–ò"
echo "================="

# –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if [ -d "node_modules" ]; then
    FRONTEND_MODULES=$(ls node_modules 2>/dev/null | wc -l)
    if [ "$FRONTEND_MODULES" -gt 50 ]; then
        log "–§—Ä–æ–Ω—Ç–µ–Ω–¥: $FRONTEND_MODULES –º–æ–¥—É–ª–µ–π ‚úì"
    elif [ "$FRONTEND_MODULES" -gt 10 ]; then
        warn "–§—Ä–æ–Ω—Ç–µ–Ω–¥: $FRONTEND_MODULES –º–æ–¥—É–ª–µ–π (–º–∞–ª–æ)"
    else
        error "–§—Ä–æ–Ω—Ç–µ–Ω–¥: $FRONTEND_MODULES –º–æ–¥—É–ª–µ–π (–∫—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ)"
    fi
else
    error "node_modules –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
fi

# –ë—ç–∫–µ–Ω–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if [ -d "server/node_modules" ]; then
    BACKEND_MODULES=$(ls server/node_modules 2>/dev/null | wc -l)
    if [ "$BACKEND_MODULES" -gt 10 ]; then
        log "–ë—ç–∫–µ–Ω–¥: $BACKEND_MODULES –º–æ–¥—É–ª–µ–π ‚úì"
    elif [ "$BACKEND_MODULES" -gt 3 ]; then
        warn "–ë—ç–∫–µ–Ω–¥: $BACKEND_MODULES –º–æ–¥—É–ª–µ–π (–º–∞–ª–æ)"
    else
        error "–ë—ç–∫–µ–Ω–¥: $BACKEND_MODULES –º–æ–¥—É–ª–µ–π (–∫—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ)"
    fi
else
    error "server/node_modules –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
fi

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏
echo ""
info "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏:"
CRITICAL=("react" "next" "express" "sqlite3")
for module in "${CRITICAL[@]}"; do
    if [ -d "node_modules/$module" ] || [ -d "server/node_modules/$module" ]; then
        log "$module ‚úì"
    else
        error "$module –û–¢–°–£–¢–°–¢–í–£–ï–¢!"
    fi
done

echo ""
echo "üóÉÔ∏è 4. –ë–ê–ó–ê –î–ê–ù–ù–´–•"
echo "================="

if [ -f "server/malabar.db" ]; then
    DB_SIZE=$(stat -c%s "server/malabar.db" 2>/dev/null || echo "0")
    if [ "$DB_SIZE" -gt 10000 ]; then
        log "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE –±–∞–π—Ç (—Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ) ‚úì"
    elif [ "$DB_SIZE" -gt 1000 ]; then
        warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE –±–∞–π—Ç (–º–∞–ª–µ–Ω—å–∫–∞—è)"
    else
        error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: $DB_SIZE –±–∞–π—Ç (–ø—É—Å—Ç–∞—è –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è)"
    fi
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if [ -r "server/malabar.db" ] && [ -w "server/malabar.db" ]; then
        log "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î ‚úì"
    else
        error "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î!"
    fi
elif [ -f "malabar.db" ]; then
    warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–Ω–µ (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ server/)"
else
    error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –ù–ê–ô–î–ï–ù–ê!"
fi

echo ""
echo "üîß 5. –ü–†–û–¶–ï–°–°–´"
echo "============="

# Node –ø—Ä–æ—Ü–µ—Å—Å—ã
NODE_PROCESSES=$(ps aux | grep -E "node.*server" | grep -v grep | wc -l)
if [ "$NODE_PROCESSES" -gt 0 ]; then
    log "Node —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω ($NODE_PROCESSES –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)"
else
    warn "Node —Å–µ—Ä–≤–µ—Ä –ù–ï –∑–∞–ø—É—â–µ–Ω"
fi

# npm –ø—Ä–æ—Ü–µ—Å—Å—ã  
NPM_PROCESSES=$(ps aux | grep -E "npm.*start" | grep -v grep | wc -l)
if [ "$NPM_PROCESSES" -gt 0 ]; then
    log "npm –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã ($NPM_PROCESSES)"
else
    warn "npm –ø—Ä–æ—Ü–µ—Å—Å—ã –ù–ï –∑–∞–ø—É—â–µ–Ω—ã"
fi

# PM2
if command -v pm2 > /dev/null; then
    PM2_COUNT=$(timeout 3 pm2 jlist 2>/dev/null | jq length 2>/dev/null || echo "0")
    if [ "$PM2_COUNT" -gt 0 ]; then
        log "PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã: $PM2_COUNT –∑–∞–ø—É—â–µ–Ω–æ"
    else
        warn "PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –ù–ï –∑–∞–ø—É—â–µ–Ω—ã"
    fi
else
    warn "PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""
echo "üåê 6. –°–ï–¢–ï–í–´–ï –ü–û–†–¢–´"
echo "=================="

# –ü–æ—Ä—Ç 3001 (API)
if ss -tulpn 2>/dev/null | grep -q ":3001"; then
    CONNECTIONS_3001=$(ss -tulpn 2>/dev/null | grep :3001 | wc -l)
    log "–ü–æ—Ä—Ç 3001 (API): –∑–∞–Ω—è—Ç ($CONNECTIONS_3001 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)"
else
    error "–ü–æ—Ä—Ç 3001 (API): –°–í–û–ë–û–î–ï–ù (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)"
fi

# –ü–æ—Ä—Ç 3000 (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
if ss -tulpn 2>/dev/null | grep -q ":3000"; then
    CONNECTIONS_3000=$(ss -tulpn 2>/dev/null | grep :3000 | wc -l)  
    log "–ü–æ—Ä—Ç 3000 (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥): –∑–∞–Ω—è—Ç ($CONNECTIONS_3000 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)"
else
    warn "–ü–æ—Ä—Ç 3000 (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥): –°–í–û–ë–û–î–ï–ù"
fi

echo ""
echo "üß™ 7. –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´"
echo "=================="

# API health
info "–¢–µ—Å—Ç API health..."
API_HEALTH=$(timeout 3 curl -s "http://localhost:3001/api/health" 2>/dev/null || echo "timeout")
if echo "$API_HEALTH" | grep -q "OK"; then
    log "API health check ‚úì"
elif [ "$API_HEALTH" = "timeout" ]; then
    error "API timeout (–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)"
else
    error "API –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: $API_HEALTH"
fi

# API players
info "–¢–µ—Å—Ç API players..."
API_PLAYERS=$(timeout 3 curl -s "http://localhost:3001/api/players" 2>/dev/null || echo "timeout")
if echo "$API_PLAYERS" | grep -q "players"; then
    log "API players ‚úì"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    if echo "$API_PLAYERS" | jq .players > /dev/null 2>&1; then
        PLAYERS_COUNT=$(echo "$API_PLAYERS" | jq '.players | length' 2>/dev/null || echo "0")
        log "–ò–≥—Ä–æ–∫–æ–≤ –≤ –ë–î: $PLAYERS_COUNT"
    fi
else
    error "API players –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

# –§—Ä–æ–Ω—Ç–µ–Ω–¥
info "–¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
FRONTEND_TEST=$(timeout 5 curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000" 2>/dev/null || echo "timeout")
if [ "$FRONTEND_TEST" = "200" ]; then
    log "–§—Ä–æ–Ω—Ç–µ–Ω–¥ HTTP 200 ‚úì"
elif [ "$FRONTEND_TEST" = "timeout" ]; then
    warn "–§—Ä–æ–Ω—Ç–µ–Ω–¥ timeout (–µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è?)"
else
    warn "–§—Ä–æ–Ω—Ç–µ–Ω–¥ HTTP $FRONTEND_TEST"
fi

echo ""
echo "üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"
echo "======================="

# –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
CRITICAL_ISSUES=0
WARNINGS=0

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
[ ! -f "package.json" ] && CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
[ ! -f "server/server.js" ] && CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
[ ! -d "node_modules" ] && CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
[ ! -d "server/node_modules" ] && CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
[ "$DISK_USAGE" -gt 80 ] && WARNINGS=$((WARNINGS + 1))
[ ! -f "server/malabar.db" ] && WARNINGS=$((WARNINGS + 1))
[ "$NODE_PROCESSES" -eq 0 ] && WARNINGS=$((WARNINGS + 1))

echo "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: $CRITICAL_ISSUES"
echo "üü° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: $WARNINGS"

echo ""
if [ "$CRITICAL_ISSUES" -eq 0 ] && [ "$WARNINGS" -eq 0 ]; then
    log "üéâ –í–°–ï –í –ü–û–†–Ø–î–ö–ï! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
    echo ""
    echo "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  ./start-server-simple-vps.sh"
    echo "  ./start-frontend-simple-vps.sh"
elif [ "$CRITICAL_ISSUES" -eq 0 ]; then
    warn "‚ö†Ô∏è –ï–°–¢–¨ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    echo "  1. –ó–∞–ø—É—Å–∫: ./start-server-simple-vps.sh"
    echo "  2. –ü—Ä–æ–≤–µ—Ä–∫–∞: ./test-simple-vps.sh"
else
    error "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´! –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞"
    echo ""
    echo "üÜò –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:"
    echo "  1. ./step-by-step-restore-vps.sh"
    echo "  2. ./install-critical-deps-vps.sh"
fi

echo ""
echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ‚Ä¢ –†–∞–∑–º–µ—Ä –º–æ–¥—É–ª–µ–π: du -sh node_modules server/node_modules"
echo "  ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: ps aux | grep node"
echo "  ‚Ä¢ –ü–æ—Ä—Ç—ã: ss -tulpn | grep :300"
echo "  ‚Ä¢ –õ–æ–≥–∏: ls -la logs/"
