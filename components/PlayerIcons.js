import { useState, useEffect, useRef, useCallback } from 'react';
import { Tooltip } from '@mui/material';
import apiService from '../services/apiService';

export default function PlayerIcons({ players, setPlayers, currentUser, onPlayerPositionUpdate, updatePlayerPositionRef, syncOnChange }) {
  // Ensure players is an array and has the expected structure
  const safePlayers = Array.isArray(players) ? players : [];
  
  // üéØ –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ì–†–ê–ù–ò–¶
  const SIDEBAR_WIDTH = 420; // –®–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞ –∏–∑ Sidebar.js
  const ICON_SIZE = 64; // –†–∞–∑–º–µ—Ä —Ñ–∏—à–∫–∏
  const PADDING = 10; // –û—Ç—Å—Ç—É–ø –æ—Ç –≥—Ä–∞–Ω–∏—Ü
  
  const containerRef = useRef(null);
  const playerRefs = useRef([]); // –°—Å—ã–ª–∫–∏ –Ω–∞ DOM —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏—à–µ–∫
  const positions = useRef({}); // –ü–æ–∑–∏—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–º –≤ ref –ø–æ player.id
  const dragState = useRef({
    isDragging: false,
    draggedIndex: null,
    dragOffset: { x: 0, y: 0 },
    initialPosition: { x: 0, y: 0 }
  });
  
  // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô debouncing –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const saveTimeoutRef = useRef(null);
  const dragTimeoutRef = useRef(null); // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å—à–∏—Ö dragState
  const lastSaveRef = useRef({}); // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
  const SAVE_DELAY = 100; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  const DRAG_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const MIN_MOVEMENT = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ DOM
  const setPlayerPosition = (playerId, x, y) => {
    const playerElement = document.querySelector(`[data-player-id="${playerId}"]`);
    if (playerElement) {
      playerElement.style.left = `${x}px`;
      playerElement.style.top = `${y}px`;
      positions.current[playerId] = { x, y };
    } else {
      console.warn(`‚ùå DOM: –≠–ª–µ–º–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM`);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
  const getPlayerPosition = (playerId) => {
    return positions.current[playerId] || { x: 0, y: 0 };
  };
  
  // üî• –†–ê–î–ò–ö–ê–õ–¨–ù–û –ü–†–û–°–¢–û–ô - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–π endpoint!
  const immediateSavePosition = useCallback(async (playerId, x, y, reason = 'immediate') => {
    console.log(`üî• RADICAL: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞ ${playerId}: (${x}, ${y}) - ${reason}`);
    
    try {
      const response = await apiService.updatePlayerCoordinates(playerId, x, y);
      console.log(`‚úÖ RADICAL: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ ${playerId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`, response);
    } catch (error) {
      console.error(`‚ùå RADICAL: –û—à–∏–±–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
      // –ù–ï –¥–µ–ª–∞–µ–º fallback - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      console.warn(`‚ö†Ô∏è RADICAL: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}`);
    }
  }, []);

  // üöÄ WebSocket-only —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const saveViaWebSocket = useCallback(async (playerId, x, y) => {
    return new Promise((resolve, reject) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket
      if (!window.WebSocket) {
        reject(new Error('WebSocket –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'));
        return;
      }
      
      const ws = new WebSocket(window.location.protocol.replace('http', 'ws') + '//' + window.location.host + '/ws');
      
      const timeout = setTimeout(() => {
        ws.close();
        reject(new Error('WebSocket timeout'));
      }, 5000);
      
      ws.onopen = () => {
        console.log(`üì° WS: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ WebSocket`);
        ws.send(JSON.stringify({
          type: 'save_coordinates',
          data: { id: playerId, x, y }
        }));
      };
      
      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          if (message.type === 'coordinates_saved' && message.data.id === playerId) {
            clearTimeout(timeout);
            ws.close();
            resolve(message);
          }
        } catch (e) {
          console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket:', event.data);
        }
      };
      
      ws.onerror = (error) => {
        clearTimeout(timeout);
        reject(error);
      };
    });
  }, []);

  // üöÄ localStorage —Ä–µ–∑–µ—Ä–≤
  const saveToLocalStorage = useCallback((playerId, x, y) => {
    try {
      const key = `player_coordinates_${playerId}`;
      const data = { x, y, timestamp: Date.now() };
      localStorage.setItem(key, JSON.stringify(data));
      
      // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const unsavedKey = 'unsaved_coordinates';
      const unsaved = JSON.parse(localStorage.getItem(unsavedKey) || '{}');
      unsaved[playerId] = { x, y, timestamp: Date.now() };
      localStorage.setItem(unsavedKey, JSON.stringify(unsaved));
      
      console.log(`üíæ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ ${playerId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage`);
    } catch (error) {
      throw new Error(`localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
  }, []);

  // üöÄ –£–ü–†–û–©–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å debouncing –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  // üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï debounced —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const debouncedSavePosition = useCallback((playerId, x, y) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
    const lastSave = lastSaveRef.current[playerId];
    if (lastSave) {
      const deltaX = Math.abs(x - lastSave.x);
      const deltaY = Math.abs(y - lastSave.y);
      const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      
      if (distance < MIN_MOVEMENT) {
        console.log(`üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –¥–≤–∏–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ: ${distance.toFixed(2)}px`);
        return;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    // –°—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π timeout
    saveTimeoutRef.current = setTimeout(async () => {
      try {
        console.log(`üíæ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞ ${playerId}: (${x}, ${y})`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ PATCH endpoint
        await apiService.updatePlayerCoordinates(playerId, x, y);
        
        // –ö—ç—à–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        lastSaveRef.current[playerId] = { x, y, timestamp: Date.now() };
        
        console.log(`‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ ${playerId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ`);
        
        // üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if (syncOnChange) {
          console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');
          syncOnChange();
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
      }
    }, SAVE_DELAY);
  }, []);
  
  // –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ API –º–∏–Ω—É—è React state
  const loadPlayerCoordinatesFromAPI = async () => {
    try {
      const response = await apiService.getPlayers();
      if (response && response.players && Array.isArray(response.players)) {
        response.players.forEach(player => {
          if (player.x !== undefined && player.y !== undefined && player.x !== null && player.y !== null) {
            setPlayerPosition(player.id, player.x, player.y);
          }
        });
      }
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ DOM –∏ API
  useEffect(() => {
    if (Array.isArray(safePlayers) && safePlayers.length > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
      setTimeout(() => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
        loadPlayerCoordinatesFromAPI().then(() => {
          // –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ë–î —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
          safePlayers.forEach((player, index) => {
            const currentPos = getPlayerPosition(player.id);
            if (currentPos.x === 0 && currentPos.y === 0) {
              // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞
              const spacing = 150;
              const columns = 4;
              const startX = 470; // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ —Å–∞–π–¥–±–∞—Ä–∞ (420 + 50)
              const startY = 100;
              
              const col = index % columns;
              const row = Math.floor(index / columns);
              
              const x = startX + col * spacing;
              const y = startY + row * spacing;
              
              setPlayerPosition(player.id, x, y);
            }
          });
        });
      }, 50);
    }
  }, [safePlayers.length]);
  
  // üöÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ô –ü–†–ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–µ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    safePlayers.forEach(player => {
      if (player.x !== undefined && player.y !== undefined) {
        const currentPos = positions.current[player.id];
        if (!currentPos || currentPos.x !== player.x || currentPos.y !== player.y) {
          console.log(`üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏ ${player.id}: (${player.x}, ${player.y})`);
          setPlayerPosition(player.id, player.x, player.y);
        }
      }
    });
  }, [safePlayers]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ—Ç WebSocket
  const updatePlayerPositionFromSync = useCallback((playerId, x, y) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const isDraggingThisPlayer = dragState.current.isDragging && 
                                safePlayers[dragState.current.draggedIndex]?.id === playerId;
    
    if (isDraggingThisPlayer) {
      console.log(`‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - –∏–≥—Ä–æ–∫ ${playerId} –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è`);
    } else {
      console.log(`üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ ${playerId}: (${x}, ${y})`);
      setPlayerPosition(playerId, x, y);
    }
  }, [safePlayers]);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ ref
  useEffect(() => {
    if (updatePlayerPositionRef) {
      updatePlayerPositionRef.current = updatePlayerPositionFromSync;
      console.log('‚úÖ PlayerIcons: updatePlayerPositionRef –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } else {
      console.warn('‚ùå PlayerIcons: updatePlayerPositionRef –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
    }
    
    return () => {
      // Cleanup
      if (updatePlayerPositionRef) {
        updatePlayerPositionRef.current = null;
      }
    };
  }, [updatePlayerPositionFromSync, updatePlayerPositionRef]);
  
  // üßπ –ü–û–õ–ù–´–ô cleanup –≤—Å–µ—Ö timeouts –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üßπ PlayerIcons: Cleanup timeouts –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      
      // Cleanup save timeout
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
        saveTimeoutRef.current = null;
      }
      
      // Cleanup drag timeout
      if (dragTimeoutRef.current) {
        clearTimeout(dragTimeoutRef.current);
        dragTimeoutRef.current = null;
      }
    };
  }, []); 
  
  // –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      // –§–∏—à–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ —Å–≤–æ–∏—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const canDrag = (playerId) => {
    if (!currentUser || !playerId) return false;
    if (!currentUser.isLoggedIn) return false; // –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ª–æ–≥–∏–Ω
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
    if (currentUser.type === 'admin') return true;
    
    // –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Ñ–∏—à–∫—É
    if (currentUser.type === 'player') {
      return String(currentUser.id) === String(playerId);
    }
    
    // –ó—Ä–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ñ–∏—à–∫–∏
    return false;
  };

  const handleMouseMove = useCallback((e) => {
    const { isDragging, draggedIndex, dragOffset } = dragState.current;
    
    if (!isDragging || draggedIndex === null) return;
    
    e.preventDefault();
    
    // –ü—Ä—è–º–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const newX = e.pageX - dragOffset.x;
    const newY = e.pageY - dragOffset.y;
    
    // –ù–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ DOM
    const player = safePlayers[draggedIndex];
    if (player) {
      setPlayerPosition(player.id, newX, newY);
    }
  }, [safePlayers]);

  // üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–ù–´–ô cleanup dragState
  const forceCleanupDragState = useCallback(() => {
    console.log('üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô cleanup dragState');
    
    // –û—á–∏—â–∞–µ–º timeout –∑–∞—â–∏—Ç—ã
    if (dragTimeoutRef.current) {
      clearTimeout(dragTimeoutRef.current);
      dragTimeoutRef.current = null;
    }
    
    // Clean up drag state
    dragState.current = {
      isDragging: false,
      draggedIndex: null,
      dragOffset: { x: 0, y: 0 },
      initialPosition: { x: 0, y: 0 }
    };
    
    // Remove event listeners (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    try {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ event listeners:', error);
    }
  }, []);

  const handleMouseUp = useCallback((e) => {
    const { isDragging, draggedIndex } = dragState.current;
    
    if (!isDragging || draggedIndex === null) {
      forceCleanupDragState(); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      return;
    }
    
    const currentPlayer = safePlayers[draggedIndex];
    if (!currentPlayer) {
      console.warn('‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
      forceCleanupDragState();
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ ref
    const currentPos = getPlayerPosition(currentPlayer.id);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    let finalX = currentPos.x;
    let finalY = currentPos.y;
    
    console.log(`üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${currentPlayer.id}: (${finalX}, ${finalY})`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ DOM
    setPlayerPosition(currentPlayer.id, finalX, finalY);
    
    // –°–ù–ê–ß–ê–õ–ê cleanup, –ü–û–¢–û–ú —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è)
    forceCleanupDragState();
    
    // üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è 
    immediateSavePosition(currentPlayer.id, finalX, finalY, 'drag_end');
    
  }, [safePlayers, forceCleanupDragState, immediateSavePosition]);

  const handleMouseDown = useCallback((e, index) => {
    const player = safePlayers[index];
    const canDragThis = canDrag(player?.id);
    
    // –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if (dragState.current.isDragging) {
      console.warn('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–∏—Å—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º');
      forceCleanupDragState();
    }
    
    if (!canDragThis) {
      return;
    }
    
    e.preventDefault();
    e.stopPropagation();
    
    console.log(`‚úÖ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ${player.id}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM
    const currentPosition = getPlayerPosition(player.id);
    
    // –í—ã—á–∏—Å–ª—è–µ–º offset –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
    const offsetX = e.pageX - currentPosition.x;
    const offsetY = e.pageY - currentPosition.y;
    
    // Set drag state
    dragState.current = {
      isDragging: true,
      draggedIndex: index,
      dragOffset: { x: offsetX, y: offsetY },
      initialPosition: getPlayerPosition(player.id)
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timeout –∑–∞—â–∏—Ç—É –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
    dragTimeoutRef.current = setTimeout(() => {
      console.warn('‚è∞ TIMEOUT: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥');
      forceCleanupDragState();
    }, DRAG_TIMEOUT);
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  }, [safePlayers, handleMouseMove, handleMouseUp, forceCleanupDragState]);

  // üßπ –ü–û–õ–ù–´–ô cleanup event listeners –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üßπ PlayerIcons: Cleanup event listeners –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      
      // Cleanup event listeners
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      
      // Force cleanup drag state
      dragState.current = {
        isDragging: false,
        draggedIndex: null,
        dragOffset: { x: 0, y: 0 },
        initialPosition: { x: 0, y: 0 }
      };
    };
  }, [handleMouseMove, handleMouseUp]);

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-full"
      style={{
        minHeight: '100vh',
        height: 'auto', // –ü–æ–∑–≤–æ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è
        backgroundColor: 'transparent', // —É–±–∏—Ä–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
        paddingBottom: '100px',
        boxSizing: 'border-box'
      }}
    >
      {safePlayers.map((player, index) => {
        // Ensure player has required properties
        if (!player || !player.id || !player.name) {
          return null;
        }
        
        const isDragging = dragState.current.draggedIndex === index && dragState.current.isDragging;
        const canDragPlayer = canDrag(player.id);
        
        
        return (
        <Tooltip key={player.id} title={player.name} arrow>
          <div
            data-player-id={player.id} // –í–∞–∂–Ω–æ! –î–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
            onMouseDown={canDragPlayer ? (e) => handleMouseDown(e, index) : undefined}
            style={{
              position: 'absolute',
              left: '0px', // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ setPlayerPosition
              top: '0px',
              cursor: canDragPlayer ? (isDragging ? 'grabbing' : 'grab') : 'default',
              zIndex: isDragging ? 9999 : 100, // –ï—â–µ –≤—ã—à–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
              transition: isDragging ? 'none' : 'all 0.2s ease',
              transform: isDragging ? 'scale(1.05)' : 'scale(1)',
              userSelect: 'none',
              pointerEvents: 'auto',
              filter: isDragging ? 'drop-shadow(0 10px 20px rgba(0,0,0,0.3))' : 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))'
            }}
            className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-200 ${
              canDragPlayer 
                ? 'bg-blue-500 hover:bg-blue-600 shadow-lg border-2 border-blue-300' 
                : 'bg-gray-500 hover:bg-gray-600 opacity-75'
            }`}
          >
            {player.avatar && typeof player.avatar === 'string' && player.avatar.trim() !== '' ? (
              <>
                <img 
                  src={player.avatar} 
                  alt={player.name} 
                  className="w-full h-full rounded-full object-cover"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'flex';
                  }}
                />
                <span className="text-white text-xl hidden">üë§</span>
              </>
            ) : (
              <span className="text-white text-xl">üë§</span>
            )}
          </div>
        </Tooltip>
        );
      })}
    </div>
  );
}