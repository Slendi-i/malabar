import { useState, useEffect, useRef } from 'react';
import { Tooltip } from '@mui/material';
import apiService from '../services/apiService';

export default function PlayerIcons({ players, setPlayers, currentUser }) {
  // Ensure players is an array and has the expected structure
  const safePlayers = Array.isArray(players) ? players : [];
  
  // üéØ –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –ì–†–ê–ù–ò–¶
  const SIDEBAR_WIDTH = 420; // –®–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞ –∏–∑ Sidebar.js
  const ICON_SIZE = 64; // –†–∞–∑–º–µ—Ä —Ñ–∏—à–∫–∏
  const PADDING = 10; // –û—Ç—Å—Ç—É–ø –æ—Ç –≥—Ä–∞–Ω–∏—Ü
  
  const containerRef = useRef(null);
  const playerRefs = useRef([]); // –°—Å—ã–ª–∫–∏ –Ω–∞ DOM —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏—à–µ–∫
  const positions = useRef({}); // –ü–æ–∑–∏—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–º –≤ ref –ø–æ player.id
  const dragState = useRef({
    isDragging: false,
    draggedIndex: null,
    dragOffset: { x: 0, y: 0 },
    initialPosition: { x: 0, y: 0 }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–∏—à–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ DOM
  const setPlayerPosition = (playerId, x, y) => {
    const playerElement = document.querySelector(`[data-player-id="${playerId}"]`);
    if (playerElement) {
      playerElement.style.left = `${x}px`;
      playerElement.style.top = `${y}px`;
      positions.current[playerId] = { x, y };
      // console.log(`üéØ DOM: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId}: (${x}, ${y})`);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ñ–∏—à–∫–∏
  const getPlayerPosition = (playerId) => {
    return positions.current[playerId] || { x: 0, y: 0 };
  };
  
  // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û: –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ API –º–∏–Ω—É—è React state
  const loadPlayerCoordinatesFromAPI = async () => {
    try {
      const response = await apiService.getPlayers();
      if (response && response.players && Array.isArray(response.players)) {
        console.log('üåê API: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î');
        response.players.forEach(player => {
          if (player.x !== undefined && player.y !== undefined && player.x !== null && player.y !== null) {
            // console.log(`üìç API: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ ${player.name}: (${player.x}, ${player.y})`);
            setPlayerPosition(player.id, player.x, player.y);
          }
        });
      }
    } catch (error) {
      console.error('‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
    }
  };

  // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û –ù–û–í–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –¢–æ–ª—å–∫–æ DOM + API, –Ω–∏–∫–∞–∫–æ–≥–æ React state –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  useEffect(() => {
    if (Array.isArray(safePlayers) && safePlayers.length > 0) {
      console.log('üöÄ –†–ê–î–ò–ö–ê–õ–¨–ù–û –ù–û–í–´–ô –ü–û–î–•–û–î: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ DOM –∏ API');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
      setTimeout(() => {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
        loadPlayerCoordinatesFromAPI().then(() => {
          // –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –ë–î —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
          safePlayers.forEach((player, index) => {
            const currentPos = getPlayerPosition(player.id);
            if (currentPos.x === 0 && currentPos.y === 0) {
              // üéØ –ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–ï–¢–ö–ê –° –£–ß–ï–¢–û–ú –ì–†–ê–ù–ò–¶
              const spacing = 150;
              const columns = 4;
              const startX = 470; // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ —Å–∞–π–¥–±–∞—Ä–∞ (420 + 50)
              const startY = 100;
              
              const col = index % columns;
              const row = Math.floor(index / columns);
              
              const x = startX + col * spacing;
              const y = startY + row * spacing;
              
              // console.log(`üÜï DOM: –ò–≥—Ä–æ–∫ ${player.name} - –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Å–µ—Ç–∫–µ: (${x}, ${y})`);
              setPlayerPosition(player.id, x, y);
            }
          });
        });
      }, 50);
    }
  }, [safePlayers.length]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤, –Ω–µ –æ—Ç –∏—Ö –¥–∞–Ω–Ω—ã—Ö
  
  // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û: –ü—Ä—è–º–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ polling
  useEffect(() => {
    const interval = setInterval(() => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (!dragState.current.isDragging) {
        console.log('üîÑ POLLING: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å API');
        loadPlayerCoordinatesFromAPI();
      }
    }, 3000);
    
    return () => clearInterval(interval);
  }, []);
  
  // üéØ –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨: –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
  useEffect(() => {
    const handleResize = () => {
      if (!containerRef.current) return;
      
      const containerRect = containerRef.current.getBoundingClientRect();
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
      
      const containerLeftInDocument = containerRect.left + scrollLeft;
      const containerTopInDocument = containerRect.top + scrollTop;
      const containerRightInDocument = containerRect.right + scrollLeft;
      const containerBottomInDocument = containerRect.bottom + scrollTop;
      
      const minX = containerLeftInDocument + PADDING;
      const maxX = containerRightInDocument - ICON_SIZE - PADDING;
      const minY = containerTopInDocument + PADDING;
      const maxY = containerBottomInDocument - ICON_SIZE - PADDING;
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∏—à–µ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –Ω–æ–≤—ã—Ö boundaries
      safePlayers.forEach(player => {
        const currentPos = getPlayerPosition(player.id);
        if (currentPos.x !== 0 || currentPos.y !== 0) {
          const newX = Math.max(minX, Math.min(maxX, currentPos.x));
          const newY = Math.max(minY, Math.min(maxY, currentPos.y));
          
          if (newX !== currentPos.x || newY !== currentPos.y) {
            // console.log(`üìê RESIZE: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ ${player.name}: (${currentPos.x}, ${currentPos.y}) -> (${newX}, ${newY})`);
            setPlayerPosition(player.id, newX, newY);
          }
        }
      });
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [safePlayers]);

  const canDrag = (playerId) => {
    if (!currentUser || !playerId) return false;
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å –≤—Å–µ —Ñ–∏—à–∫–∏
    if (currentUser.type === 'admin') return true;
    
    // –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Ñ–∏—à–∫—É
    if (currentUser.type === 'player') {
      return String(currentUser.id) === String(playerId);
    }
    
    // –ó—Ä–∏—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å —Ñ–∏—à–∫–∏
    return false;
  };

  const handleMouseMove = (e) => {
    const { isDragging, draggedIndex, dragOffset } = dragState.current;
    
    if (!isDragging || draggedIndex === null) return;
    
    e.preventDefault();
    
    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ì–†–ê–ù–ò–¶–´: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (!containerRef.current) return;
    
    const containerRect = containerRef.current.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const containerLeftInDocument = containerRect.left + scrollLeft;
    const containerTopInDocument = containerRect.top + scrollTop;
    const containerRightInDocument = containerRect.right + scrollLeft;
    const containerBottomInDocument = containerRect.bottom + scrollTop;
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const minX = containerLeftInDocument + PADDING; // –°–ª–µ–≤–∞ - –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const maxX = containerRightInDocument - ICON_SIZE - PADDING; // –°–ø—Ä–∞–≤–∞ - –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const minY = containerTopInDocument + PADDING; // –°–≤–µ—Ä—Ö—É - –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const maxY = containerBottomInDocument - ICON_SIZE - PADDING; // –°–Ω–∏–∑—É - –∫–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    const newX = Math.max(minX, Math.min(maxX, e.pageX - dragOffset.x));
    const newY = Math.max(minY, Math.min(maxY, e.pageY - dragOffset.y));
    
    console.log(`üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ì–†–ê–ù–ò–¶–´: pageX=${e.pageX}, pageY=${e.pageY}, newX=${newX}, newY=${newY}, –≥—Ä–∞–Ω–∏—Ü—ã: X(${minX}-${maxX}), Y(${minY}-${maxY})`);
    
    // –ù–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ DOM
    const player = safePlayers[draggedIndex];
    if (player) {
      setPlayerPosition(player.id, newX, newY);
    }
  };

  const handleMouseUp = (e) => {
    const { isDragging, draggedIndex } = dragState.current;
    
    if (!isDragging || draggedIndex === null) return;
    
    const currentPlayer = safePlayers[draggedIndex];
    if (!currentPlayer) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ ref
    const currentPos = getPlayerPosition(currentPlayer.id);
    
    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ì–†–ê–ù–ò–¶–´: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
    if (!containerRef.current) return;
    
    const containerRect = containerRef.current.getBoundingClientRect();
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const containerLeftInDocument = containerRect.left + scrollLeft;
    const containerTopInDocument = containerRect.top + scrollTop;
    const containerRightInDocument = containerRect.right + scrollLeft;
    const containerBottomInDocument = containerRect.bottom + scrollTop;
    
    // –ì—Ä–∞–Ω–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const minX = containerLeftInDocument + PADDING;
    const maxX = containerRightInDocument - ICON_SIZE - PADDING;
    const minY = containerTopInDocument + PADDING;
    const maxY = containerBottomInDocument - ICON_SIZE - PADDING;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    let finalX = Math.max(minX, Math.min(maxX, currentPos.x));
    let finalY = Math.max(minY, Math.min(maxY, currentPos.y));
    
    console.log(`üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–û–ó–ò–¶–ò–û–ù–ò–†–û–í–ê–ù–ò–ï: (${finalX}, ${finalY}), –≥—Ä–∞–Ω–∏—Ü—ã: X(${minX}-${maxX}), Y(${minY}-${maxY})`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ DOM
    setPlayerPosition(currentPlayer.id, finalX, finalY);
    console.log(`‚úÖ DOM: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ ${currentPlayer.name}: (${finalX}, ${finalY})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log(`üíæ DOM: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ${currentPlayer.name} -> (${finalX}, ${finalY})`);
    
    apiService.updatePlayerCoordinates(currentPlayer.id, finalX, finalY)
      .then(() => {
        console.log(`‚úÖ DOM: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${currentPlayer.name}`);
      })
      .catch(error => {
        console.error('‚ùå DOM: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞:', error);
      });
    
    // Clean up drag state
    dragState.current = {
      isDragging: false,
      draggedIndex: null,
      dragOffset: { x: 0, y: 0 },
      initialPosition: { x: 0, y: 0 }
    };
    
    // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û: –£–±—Ä–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
    
    // Remove event listeners
    document.removeEventListener('mousemove', handleMouseMove);
    document.removeEventListener('mouseup', handleMouseUp);
  };

  const handleMouseDown = (e, index) => {
    const player = safePlayers[index];
    const canDragThis = canDrag(player?.id);
    
    if (!canDragThis || dragState.current.isDragging) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û –£–ü–†–û–©–ê–ï–ú: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ DOM
    const currentPosition = getPlayerPosition(player.id);
    
    // –í—ã—á–∏—Å–ª—è–µ–º offset –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
    const offsetX = e.pageX - currentPosition.x;
    const offsetY = e.pageY - currentPosition.y;
    
    // console.log(`üöÄ –ù–ê–ß–ê–õ–û –ë–ï–ó –ì–†–ê–ù–ò–¶: pageX=${e.pageX}, pageY=${e.pageY}, currentPos=(${currentPosition.x}, ${currentPosition.y}), offset=(${offsetX}, ${offsetY})`);
    
    // Set drag state
    dragState.current = {
      isDragging: true,
      draggedIndex: index,
      dragOffset: { x: offsetX, y: offsetY },
      initialPosition: getPlayerPosition(player.id)
    };
    
    // üö® –†–ê–î–ò–ö–ê–õ–¨–ù–û: –£–±—Ä–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
    
    console.log(`üñ±Ô∏è DOM: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${player.name}`);
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp);
  };

  // Cleanup event listeners when component unmounts
  useEffect(() => {
    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
    };
  }, []);

  return (
    <div 
      ref={containerRef}
      className="relative w-full h-full"
      style={{
        minHeight: '100vh',
        height: 'auto', // –ü–æ–∑–≤–æ–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è
        backgroundColor: 'transparent', // —É–±–∏—Ä–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
        paddingBottom: '100px',
        boxSizing: 'border-box'
      }}
    >
      {safePlayers.map((player, index) => {
        // Ensure player has required properties
        if (!player || !player.id || !player.name) {
          return null;
        }
        
        const isDragging = dragState.current.draggedIndex === index && dragState.current.isDragging;
        const canDragPlayer = canDrag(player.id);
        
        
        return (
        <Tooltip key={player.id} title={player.name} arrow>
          <div
            data-player-id={player.id} // –í–∞–∂–Ω–æ! –î–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
            onMouseDown={canDragPlayer ? (e) => handleMouseDown(e, index) : undefined}
            style={{
              position: 'absolute',
              left: '0px', // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ setPlayerPosition
              top: '0px',
              cursor: canDragPlayer ? (isDragging ? 'grabbing' : 'grab') : 'default',
              zIndex: isDragging ? 9999 : 100, // –ï—â–µ –≤—ã—à–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
              transition: isDragging ? 'none' : 'all 0.3s ease',
              transform: isDragging ? 'scale(1.1) rotate(5deg)' : 'scale(1)',
              userSelect: 'none',
              pointerEvents: 'auto',
              filter: isDragging ? 'drop-shadow(0 10px 20px rgba(0,0,0,0.3))' : 'drop-shadow(0 2px 4px rgba(0,0,0,0.1))'
            }}
            className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-200 ${
              canDragPlayer 
                ? 'bg-blue-500 hover:bg-blue-600 shadow-lg border-2 border-blue-300' 
                : 'bg-gray-500 hover:bg-gray-600 opacity-75'
            }`}
          >
            {player.avatar && typeof player.avatar === 'string' && player.avatar.trim() !== '' ? (
              <>
                <img 
                  src={player.avatar} 
                  alt={player.name} 
                  className="w-full h-full rounded-full object-cover"
                  onError={(e) => {
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'flex';
                  }}
                />
                <span className="text-white text-xl hidden">üë§</span>
              </>
            ) : (
              <span className="text-white text-xl">üë§</span>
            )}
          </div>
        </Tooltip>
        );
      })}
    </div>
  );
}